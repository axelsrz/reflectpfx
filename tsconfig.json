{
    "compilerOptions": {
      "target": "es2019" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
      "moduleResolution": "node",
      "resolveJsonModule": true /* Enable importing .json files */,
      "declaration": true /* Generate .d.ts files from TypeScript and JavaScript files in your project. */,
      "outDir": "./lib" /* Specify an output folder for all emitted files. */,
      "importHelpers": false /* Allow importing helper functions from tslib once per project, instead of including them per-file. */,
      "importsNotUsedAsValues": "remove" /* Specify emit/checking behavior for imports that are only used for types */,
      "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */,
      "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,
      "strict": false /* Enable all strict type-checking options. */,
      "noImplicitAny": false /* Enable error reporting for expressions and declarations with an implied `any` type.. */,
      "strictNullChecks": false /* When type checking, take into account `null` and `undefined`. */,
      "strictFunctionTypes": false /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */,
      "strictBindCallApply": false /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */,
      "strictPropertyInitialization": false /* Check for class properties that are declared but not set in the constructor. */,
      "noImplicitThis": true /* Enable error reporting when `this` is given the type `any`. */,
      "noImplicitReturns": true /* Enable error reporting for codepaths that do not explicitly return in a function. */,
      "noFallthroughCasesInSwitch": true /* Enable error reporting for fallthrough cases in switch statements. */,
      "noImplicitOverride": true /* Ensure overriding members in derived classes are marked with an override modifier. */,
      "allowUnreachableCode": true /* Disable error reporting for unreachable code. */,
      "composite": true /* Enable constraints that allow a TypeScript project to be used with project references. */
    },
    "include": ["src/**/*.ts", "src/find.ts"]
}