/**
 * <auto-generated />
 */

import {
    SolutionComponent,
    BotEntity,
    CloudFlowDefinition,
    EnvironmentVariableDefinition,
    EnvironmentVariableValue,
    BotComponentBase,
    DialogComponent,
    TriggerComponent,
    CustomEntityComponent,
    GlobalVariableComponent,
    SkillComponent,
    LegacyOrUnknownComponent,
    BotComponentChangeSet,
    BotComponentChange,
    BotComponentUpsert,
    BotComponentInsert,
    BotComponentUpdate,
    BotComponentDelete,
    BotElement,
    BotDefinition,
    SkillDefinition,
    EnvironmentVariableReference,
    SkillActionDefinition,
    Recognizer,
    RegexIntentPattern,
    RegexRecognizer,
    VirtualAgentsRecognizer,
    Intent,
    StandaloneTrigger,
    TriggerBase,
    OnSystemDialogBegin,
    OnCondition,
    OnDialogEventBase,
    OnDialogEvent,
    OnActivityBase,
    OnActivity,
    OnCommandActivity,
    OnCommandResultActivity,
    OnConversationUpdateActivity,
    OnEndOfConversationActivity,
    OnEventActivityBase,
    OnEventActivity,
    OnContinueConversation,
    OnHandoffActivity,
    OnInstallationUpdateActivity,
    OnInvokeActivity,
    OnMessageActivity,
    OnMessageDeleteActivity,
    OnMessageReactionActivity,
    OnMessageUpdateActivity,
    OnTypingActivity,
    OnAssignEntity,
    OnBeginDialog,
    OnCancelDialog,
    OnChooseEntity,
    OnChooseProperty,
    OnEndOfActions,
    OnError,
    OnRecognizedIntentBase,
    OnRecognizedIntent,
    OnIntentBase,
    OnIntent,
    OnChooseIntent,
    OnRepromptDialog,
    OnUnknownIntent,
    OnGreeting,
    OnTalkToAgent,
    OnStartOver,
    OnGoodbye,
    OnThankYou,
    OnEndOfConversation,
    OnAssumedSuccess,
    OnConfirmedFailure,
    OnConfirmedSuccess,
    OnInactivity,
    OnFallback,
    ActionReference,
    VariableBase,
    StandaloneVariable,
    Variable,
    VariableInitializer,
    ActionInitializer,
    ExpressionInitializer,
    Dialog,
    AdaptiveDialog,
    ConversionMetadata,
    DialogAction,
    ExternalAction,
    InvokeFlowAction,
    InvokeSkillAction,
    InputDialog,
    Question,
    CSATQuestion,
    AttachmentInput,
    ChoiceInput,
    ConfirmInput,
    DateTimeInput,
    NumberInput,
    OAuthInput,
    TextInput,
    ActionScopeBase,
    ActionScope,
    Case,
    Foreach,
    ForeachPage,
    BaseInvokeDialogOrSelf,
    BaseInvokeDialog,
    BeginDialog,
    RepeatDialog,
    ReplaceDialog,
    BreakLoop,
    CancelAllDialogsBase,
    CancelAllDialogs,
    CancelDialog,
    ClearAllVariables,
    ContinueLoop,
    DebugBreak,
    DeleteActivity,
    DeleteProperties,
    DeleteProperty,
    EditArray,
    EmitEvent,
    EndDialog,
    EndTurn,
    GetActivityMembers,
    GetConversationMembers,
    GotoAction,
    HttpRequest,
    IfCondition,
    Condition,
    ConditionItem,
    EndConversation,
    SendMessage,
    SendActivity,
    HandoffContext,
    ExpressionHandoffContext,
    AutomaticHandoffContext,
    SendHandoffActivity,
    SetProperties,
    SetProperty,
    SignOutUser,
    SwitchCondition,
    TelemetryTrackEventAction,
    TraceActivity,
    UpdateActivity,
    DisconnectedNodeContainer,
    FindChoicesOptions,
    Choice,
    ChoiceFactoryOptions,
    CardActionDefinition,
    PropertyAssignment,
    ActionInputBinding,
    ActionOutputBinding,
    BotConfiguration,
    Category,
    VoiceSetting,
    ChannelDefinition,
    TeamsApplicationDetails,
    BotSynchronizationDetails,
    PublishResultDetails,
    DiagnosticResult,
    ComponentDiagnosticResult,
    ActionReferenceDiagnosticResult,
    ContentShareContext,
    ManagedProperties,
    AuditInfo,
    LanguageUnderstandingElement,
    EntityReference,
    EmbeddedEntity,
    PrebuiltEntityReference,
    RegexEntityReference,
    ClosedListEntityReference,
    Entity,
    RegexEntity,
    ClosedListEntity,
    ClosedListItem,
    LanguageGenerationElement,
    TemplateSegment,
    TextSegment,
    ExpressionSegment,
    TemplateLine,
    TemplateReference,
    LanguageGenerationTemplate,
    TemplateBody,
    NormalTemplateBody,
    TemplateSwitchCase,
    TemplateIfCondition,
    IfElseTemplateBody,
    SwitchTemplateBody,
    PropertyEntry,
    StructuredTemplateInvocation,
    StructuredProperty,
    StructuredPropertyWithLine,
    StructuredPropertyWithList,
    StructuredTemplateBody,
    ActivityTemplateBase,
    ActivityTemplate,
    MessageActivityTemplate,
    ActivityAttachment,
    VideoCardTemplate,
    ImageCardTemplate,
    AdaptiveCardTemplate,
    HeroCardTemplate,
    DataType,
    UnspecifiedDataType,
    BlankType,
    BooleanDataType,
    NumberDataType,
    StringDataType,
    TimeSpanDataType,
    DateTimeDataType,
    AnyType,
    PropertyInfo,
    AggregateDataType,
    TableDataType,
    RecordDataType,
    OptionSetDataType,
    ClosedListOptionSetDataType,
    EmbeddedOptionSetDataType,
    SystemOptionSetDataType,
    OptionDataValue,
    BotElementDiagnostic,
    BotElementIssue,
    BotElementError,
    BotElementWarning,
    PropertyErrorBase,
    IncorrectTypeError,
    ExpressionError,
    InvalidVariableType,
    PropertyError,
    ListPropertyItemError,
    DictionaryPropertyItemError,
    InvalidReferenceError,
    BindingError,
    BindingKeyNotFoundError,
    BindingIncorrectTypeError,
    ReadOnlyVariableMutationError,
    UnknownElementError,
    BotElementSuggestion,
    ChangeDialogContractSuggestion,
    VariableInformationDiagnostic,
    InitializerInfo,
    OptionInfo,
    BooleanConditionBase,
    BooleanConditionGroup,
    AndConditionGroup,
    OrConditionGroup,
    BooleanCondition,
    WasmCommand,
    CancelCommand,
    ConvertFileFormatCommand,
    ActionContextInfo,
    PowerFxLanguageServerCommand,
    LoadBotCommand,
    GetVariableReferencesCommand,
    GetVariablesCommand,
    LoadBotChangesCommand,
    ValidateBotCommand,
    GetComponentCommand,
    UpdateVariableCommand,
    GetSerializedContentCommand,
    GetSerializedElementsCommand,
    ParseElementsCommand,
    ApplyBotElementSuggestionCommand,
    WasmCommandResponse,
    LoadBotCommandResponse,
    ApplyBotElementSuggestionCommandResponse,
    ErrorCommandResponse,
    VariableReferenceInfo,
    GetVariableReferencesCommandResponse,
    OptionSetInfo,
    GetVariablesCommandResponse,
    ValidateBotCommandResponse,
    GetComponentCommandResponse,
    GetSerializedElementsCommandResponse,
    ParseElementsCommandResponse,
    PowerFxLanguageServerCommandResponse,
    ConvertFileFormatCommandResponse,
    UpdateVariableCommandResponse,
    ExtractTransferStateCommand,
    ApplyTransferStateCommand,
    ExtractTransferStateCommandResponse,
    ApplyTransferStateCommandResponse,
    TransferState,
    GetSerializedContentCommandResponse,
    WasmLog,
    WasmBrowserActivityLog,
    WasmBrowserTelemetryLog,
    EnumExpression,
    ArrayExpression,
    ObjectExpression,
    ValueExpression,
    BoolExpression,
    NumberExpression,
    IntExpression,
    StringExpression,
    DialogExpression,
    DataValue,
    PropertyPath
} from "./types";
import {
    BotComponentChangeKind,
    BotElementKind,
    DiagnosticResultKind,
    PropertyPathKind,
    DataTypeKind,
    DataValueKind,
    BotElementDiagnosticKind,
    BotElementSuggestionKind,
    WasmCommandKind,
    WasmCommandResponseKind,
    WasmLogKind
} from "./kinds";

/**
 * Type checker for SolutionComponent
 */
export const isSolutionComponent = <T extends BotElement>(
 obj?: T | null
): obj is T & SolutionComponent => obj?.$kind === BotElementKind.BotEntity || obj?.$kind === BotElementKind.CloudFlowDefinition || obj?.$kind === BotElementKind.EnvironmentVariableDefinition || obj?.$kind === BotElementKind.EnvironmentVariableValue || obj?.$kind === BotElementKind.DialogComponent || obj?.$kind === BotElementKind.TriggerComponent || obj?.$kind === BotElementKind.CustomEntityComponent || obj?.$kind === BotElementKind.GlobalVariableComponent || obj?.$kind === BotElementKind.SkillComponent || obj?.$kind === BotElementKind.LegacyOrUnknownComponent;

/**
 * Type checker for BotEntity
 */
export const isBotEntity = <T extends BotElement>(
 obj?: T | null
): obj is T & BotEntity => obj?.$kind === BotElementKind.BotEntity;

/**
 * Type checker for CloudFlowDefinition
 */
export const isCloudFlowDefinition = <T extends BotElement>(
 obj?: T | null
): obj is T & CloudFlowDefinition => obj?.$kind === BotElementKind.CloudFlowDefinition;

/**
 * Type checker for EnvironmentVariableDefinition
 */
export const isEnvironmentVariableDefinition = <T extends BotElement>(
 obj?: T | null
): obj is T & EnvironmentVariableDefinition => obj?.$kind === BotElementKind.EnvironmentVariableDefinition;

/**
 * Type checker for EnvironmentVariableValue
 */
export const isEnvironmentVariableValue = <T extends BotElement>(
 obj?: T | null
): obj is T & EnvironmentVariableValue => obj?.$kind === BotElementKind.EnvironmentVariableValue;

/**
 * Type checker for BotComponentBase
 */
export const isBotComponentBase = <T extends BotElement>(
 obj?: T | null
): obj is T & BotComponentBase => obj?.$kind === BotElementKind.DialogComponent || obj?.$kind === BotElementKind.TriggerComponent || obj?.$kind === BotElementKind.CustomEntityComponent || obj?.$kind === BotElementKind.GlobalVariableComponent || obj?.$kind === BotElementKind.SkillComponent || obj?.$kind === BotElementKind.LegacyOrUnknownComponent;

/**
 * Type checker for DialogComponent
 */
export const isDialogComponent = <T extends BotElement>(
 obj?: T | null
): obj is T & DialogComponent => obj?.$kind === BotElementKind.DialogComponent;

/**
 * Type checker for TriggerComponent
 */
export const isTriggerComponent = <T extends BotElement>(
 obj?: T | null
): obj is T & TriggerComponent => obj?.$kind === BotElementKind.TriggerComponent;

/**
 * Type checker for CustomEntityComponent
 */
export const isCustomEntityComponent = <T extends BotElement>(
 obj?: T | null
): obj is T & CustomEntityComponent => obj?.$kind === BotElementKind.CustomEntityComponent;

/**
 * Type checker for GlobalVariableComponent
 */
export const isGlobalVariableComponent = <T extends BotElement>(
 obj?: T | null
): obj is T & GlobalVariableComponent => obj?.$kind === BotElementKind.GlobalVariableComponent;

/**
 * Type checker for SkillComponent
 */
export const isSkillComponent = <T extends BotElement>(
 obj?: T | null
): obj is T & SkillComponent => obj?.$kind === BotElementKind.SkillComponent;

/**
 * Type checker for LegacyOrUnknownComponent
 */
export const isLegacyOrUnknownComponent = <T extends BotElement>(
 obj?: T | null
): obj is T & LegacyOrUnknownComponent => obj?.$kind === BotElementKind.LegacyOrUnknownComponent;

/**
 * Type checker for BotComponentChange
 */
export const isBotComponentChange = <T extends BotComponentChange>(
 obj?: T | null
): obj is T & BotComponentChange => obj?.$kind === BotComponentChangeKind.BotComponentInsert || obj?.$kind === BotComponentChangeKind.BotComponentUpdate || obj?.$kind === BotComponentChangeKind.BotComponentDelete;

/**
 * Type checker for BotComponentUpsert
 */
export const isBotComponentUpsert = <T extends BotComponentChange>(
 obj?: T | null
): obj is T & BotComponentUpsert => obj?.$kind === BotComponentChangeKind.BotComponentInsert || obj?.$kind === BotComponentChangeKind.BotComponentUpdate;

/**
 * Type checker for BotComponentInsert
 */
export const isBotComponentInsert = <T extends BotComponentChange>(
 obj?: T | null
): obj is T & BotComponentInsert => obj?.$kind === BotComponentChangeKind.BotComponentInsert;

/**
 * Type checker for BotComponentUpdate
 */
export const isBotComponentUpdate = <T extends BotComponentChange>(
 obj?: T | null
): obj is T & BotComponentUpdate => obj?.$kind === BotComponentChangeKind.BotComponentUpdate;

/**
 * Type checker for BotComponentDelete
 */
export const isBotComponentDelete = <T extends BotComponentChange>(
 obj?: T | null
): obj is T & BotComponentDelete => obj?.$kind === BotComponentChangeKind.BotComponentDelete;

/**
 * Type checker for BotElement
 */
export const isBotElement = <T extends BotElement>(
 obj?: T | null
): obj is T & BotElement => obj?.$kind === BotElementKind.BotEntity || obj?.$kind === BotElementKind.CloudFlowDefinition || obj?.$kind === BotElementKind.EnvironmentVariableDefinition || obj?.$kind === BotElementKind.EnvironmentVariableValue || obj?.$kind === BotElementKind.DialogComponent || obj?.$kind === BotElementKind.TriggerComponent || obj?.$kind === BotElementKind.CustomEntityComponent || obj?.$kind === BotElementKind.GlobalVariableComponent || obj?.$kind === BotElementKind.SkillComponent || obj?.$kind === BotElementKind.LegacyOrUnknownComponent || obj?.$kind === BotElementKind.BotDefinition || obj?.$kind === BotElementKind.SkillDefinition || obj?.$kind === BotElementKind.EnvironmentVariableReference || obj?.$kind === BotElementKind.SkillActionDefinition || obj?.$kind === BotElementKind.RegexIntentPattern || obj?.$kind === BotElementKind.RegexRecognizer || obj?.$kind === BotElementKind.VirtualAgentsRecognizer || obj?.$kind === BotElementKind.Intent || obj?.$kind === BotElementKind.StandaloneTrigger || obj?.$kind === BotElementKind.OnCondition || obj?.$kind === BotElementKind.OnDialogEvent || obj?.$kind === BotElementKind.OnActivity || obj?.$kind === BotElementKind.OnCommandActivity || obj?.$kind === BotElementKind.OnCommandResultActivity || obj?.$kind === BotElementKind.OnConversationUpdateActivity || obj?.$kind === BotElementKind.OnEndOfConversationActivity || obj?.$kind === BotElementKind.OnEventActivity || obj?.$kind === BotElementKind.OnContinueConversation || obj?.$kind === BotElementKind.OnHandoffActivity || obj?.$kind === BotElementKind.OnInstallationUpdateActivity || obj?.$kind === BotElementKind.OnInvokeActivity || obj?.$kind === BotElementKind.OnMessageActivity || obj?.$kind === BotElementKind.OnMessageDeleteActivity || obj?.$kind === BotElementKind.OnMessageReactionActivity || obj?.$kind === BotElementKind.OnMessageUpdateActivity || obj?.$kind === BotElementKind.OnTypingActivity || obj?.$kind === BotElementKind.OnAssignEntity || obj?.$kind === BotElementKind.OnBeginDialog || obj?.$kind === BotElementKind.OnCancelDialog || obj?.$kind === BotElementKind.OnChooseEntity || obj?.$kind === BotElementKind.OnChooseProperty || obj?.$kind === BotElementKind.OnEndOfActions || obj?.$kind === BotElementKind.OnError || obj?.$kind === BotElementKind.OnRecognizedIntent || obj?.$kind === BotElementKind.OnIntent || obj?.$kind === BotElementKind.OnChooseIntent || obj?.$kind === BotElementKind.OnRepromptDialog || obj?.$kind === BotElementKind.OnUnknownIntent || obj?.$kind === BotElementKind.OnGreeting || obj?.$kind === BotElementKind.OnTalkToAgent || obj?.$kind === BotElementKind.OnStartOver || obj?.$kind === BotElementKind.OnGoodbye || obj?.$kind === BotElementKind.OnThankYou || obj?.$kind === BotElementKind.OnEndOfConversation || obj?.$kind === BotElementKind.OnAssumedSuccess || obj?.$kind === BotElementKind.OnConfirmedFailure || obj?.$kind === BotElementKind.OnConfirmedSuccess || obj?.$kind === BotElementKind.OnInactivity || obj?.$kind === BotElementKind.OnFallback || obj?.$kind === BotElementKind.ActionReference || obj?.$kind === BotElementKind.StandaloneVariable || obj?.$kind === BotElementKind.Variable || obj?.$kind === BotElementKind.ActionInitializer || obj?.$kind === BotElementKind.ExpressionInitializer || obj?.$kind === BotElementKind.AdaptiveDialog || obj?.$kind === BotElementKind.InvokeFlowAction || obj?.$kind === BotElementKind.InvokeSkillAction || obj?.$kind === BotElementKind.Question || obj?.$kind === BotElementKind.CSATQuestion || obj?.$kind === BotElementKind.AttachmentInput || obj?.$kind === BotElementKind.ChoiceInput || obj?.$kind === BotElementKind.ConfirmInput || obj?.$kind === BotElementKind.DateTimeInput || obj?.$kind === BotElementKind.NumberInput || obj?.$kind === BotElementKind.OAuthInput || obj?.$kind === BotElementKind.TextInput || obj?.$kind === BotElementKind.ActionScope || obj?.$kind === BotElementKind.Case || obj?.$kind === BotElementKind.Foreach || obj?.$kind === BotElementKind.ForeachPage || obj?.$kind === BotElementKind.BeginDialog || obj?.$kind === BotElementKind.RepeatDialog || obj?.$kind === BotElementKind.ReplaceDialog || obj?.$kind === BotElementKind.BreakLoop || obj?.$kind === BotElementKind.CancelAllDialogs || obj?.$kind === BotElementKind.CancelDialog || obj?.$kind === BotElementKind.ClearAllVariables || obj?.$kind === BotElementKind.ContinueLoop || obj?.$kind === BotElementKind.DebugBreak || obj?.$kind === BotElementKind.DeleteActivity || obj?.$kind === BotElementKind.DeleteProperties || obj?.$kind === BotElementKind.DeleteProperty || obj?.$kind === BotElementKind.EditArray || obj?.$kind === BotElementKind.EmitEvent || obj?.$kind === BotElementKind.EndDialog || obj?.$kind === BotElementKind.EndTurn || obj?.$kind === BotElementKind.GetActivityMembers || obj?.$kind === BotElementKind.GetConversationMembers || obj?.$kind === BotElementKind.GotoAction || obj?.$kind === BotElementKind.HttpRequest || obj?.$kind === BotElementKind.IfCondition || obj?.$kind === BotElementKind.Condition || obj?.$kind === BotElementKind.ConditionItem || obj?.$kind === BotElementKind.EndConversation || obj?.$kind === BotElementKind.SendMessage || obj?.$kind === BotElementKind.SendActivity || obj?.$kind === BotElementKind.ExpressionHandoffContext || obj?.$kind === BotElementKind.AutomaticHandoffContext || obj?.$kind === BotElementKind.SendHandoffActivity || obj?.$kind === BotElementKind.SetProperties || obj?.$kind === BotElementKind.SetProperty || obj?.$kind === BotElementKind.SignOutUser || obj?.$kind === BotElementKind.SwitchCondition || obj?.$kind === BotElementKind.TelemetryTrackEventAction || obj?.$kind === BotElementKind.TraceActivity || obj?.$kind === BotElementKind.UpdateActivity || obj?.$kind === BotElementKind.DisconnectedNodeContainer || obj?.$kind === BotElementKind.CardActionDefinition || obj?.$kind === BotElementKind.PropertyAssignment || obj?.$kind === BotElementKind.ActionInputBinding || obj?.$kind === BotElementKind.ActionOutputBinding || obj?.$kind === BotElementKind.ContentShareContext || obj?.$kind === BotElementKind.ManagedProperties || obj?.$kind === BotElementKind.EmbeddedEntity || obj?.$kind === BotElementKind.PrebuiltEntityReference || obj?.$kind === BotElementKind.RegexEntityReference || obj?.$kind === BotElementKind.ClosedListEntityReference || obj?.$kind === BotElementKind.RegexEntity || obj?.$kind === BotElementKind.ClosedListEntity || obj?.$kind === BotElementKind.ClosedListItem || obj?.$kind === BotElementKind.TextSegment || obj?.$kind === BotElementKind.ExpressionSegment || obj?.$kind === BotElementKind.TemplateLine || obj?.$kind === BotElementKind.TemplateReference || obj?.$kind === BotElementKind.LanguageGenerationTemplate || obj?.$kind === BotElementKind.NormalTemplateBody || obj?.$kind === BotElementKind.TemplateSwitchCase || obj?.$kind === BotElementKind.TemplateIfCondition || obj?.$kind === BotElementKind.IfElseTemplateBody || obj?.$kind === BotElementKind.SwitchTemplateBody || obj?.$kind === BotElementKind.StructuredTemplateInvocation || obj?.$kind === BotElementKind.StructuredPropertyWithLine || obj?.$kind === BotElementKind.StructuredPropertyWithList || obj?.$kind === BotElementKind.StructuredTemplateBody || obj?.$kind === BotElementKind.ActivityTemplate || obj?.$kind === BotElementKind.MessageActivityTemplate || obj?.$kind === BotElementKind.VideoCardTemplate || obj?.$kind === BotElementKind.ImageCardTemplate || obj?.$kind === BotElementKind.AdaptiveCardTemplate || obj?.$kind === BotElementKind.HeroCardTemplate || obj?.$kind === BotElementKind.AndConditionGroup || obj?.$kind === BotElementKind.OrConditionGroup || obj?.$kind === BotElementKind.BooleanCondition || obj?.$kind === BotElementKind.EnumExpression_T || obj?.$kind === BotElementKind.ArrayExpression_T || obj?.$kind === BotElementKind.ObjectExpression_T || obj?.$kind === BotElementKind.ValueExpression || obj?.$kind === BotElementKind.BoolExpression || obj?.$kind === BotElementKind.NumberExpression || obj?.$kind === BotElementKind.IntExpression || obj?.$kind === BotElementKind.StringExpression || obj?.$kind === BotElementKind.DialogExpression;

/**
 * Type checker for BotDefinition
 */
export const isBotDefinition = <T extends BotElement>(
 obj?: T | null
): obj is T & BotDefinition => obj?.$kind === BotElementKind.BotDefinition;

/**
 * Type checker for SkillDefinition
 */
export const isSkillDefinition = <T extends BotElement>(
 obj?: T | null
): obj is T & SkillDefinition => obj?.$kind === BotElementKind.SkillDefinition;

/**
 * Type checker for EnvironmentVariableReference
 */
export const isEnvironmentVariableReference = <T extends BotElement>(
 obj?: T | null
): obj is T & EnvironmentVariableReference => obj?.$kind === BotElementKind.EnvironmentVariableReference;

/**
 * Type checker for SkillActionDefinition
 */
export const isSkillActionDefinition = <T extends BotElement>(
 obj?: T | null
): obj is T & SkillActionDefinition => obj?.$kind === BotElementKind.SkillActionDefinition;

/**
 * Type checker for Recognizer
 */
export const isRecognizer = <T extends BotElement>(
 obj?: T | null
): obj is T & Recognizer => obj?.$kind === BotElementKind.RegexRecognizer || obj?.$kind === BotElementKind.VirtualAgentsRecognizer;

/**
 * Type checker for RegexIntentPattern
 */
export const isRegexIntentPattern = <T extends BotElement>(
 obj?: T | null
): obj is T & RegexIntentPattern => obj?.$kind === BotElementKind.RegexIntentPattern;

/**
 * Type checker for RegexRecognizer
 */
export const isRegexRecognizer = <T extends BotElement>(
 obj?: T | null
): obj is T & RegexRecognizer => obj?.$kind === BotElementKind.RegexRecognizer;

/**
 * Type checker for VirtualAgentsRecognizer
 */
export const isVirtualAgentsRecognizer = <T extends BotElement>(
 obj?: T | null
): obj is T & VirtualAgentsRecognizer => obj?.$kind === BotElementKind.VirtualAgentsRecognizer;

/**
 * Type checker for Intent
 */
export const isIntent = <T extends BotElement>(
 obj?: T | null
): obj is T & Intent => obj?.$kind === BotElementKind.Intent;

/**
 * Type checker for StandaloneTrigger
 */
export const isStandaloneTrigger = <T extends BotElement>(
 obj?: T | null
): obj is T & StandaloneTrigger => obj?.$kind === BotElementKind.StandaloneTrigger;

/**
 * Type checker for TriggerBase
 */
export const isTriggerBase = <T extends BotElement>(
 obj?: T | null
): obj is T & TriggerBase => obj?.$kind === BotElementKind.OnCondition || obj?.$kind === BotElementKind.OnDialogEvent || obj?.$kind === BotElementKind.OnActivity || obj?.$kind === BotElementKind.OnCommandActivity || obj?.$kind === BotElementKind.OnCommandResultActivity || obj?.$kind === BotElementKind.OnConversationUpdateActivity || obj?.$kind === BotElementKind.OnEndOfConversationActivity || obj?.$kind === BotElementKind.OnEventActivity || obj?.$kind === BotElementKind.OnContinueConversation || obj?.$kind === BotElementKind.OnHandoffActivity || obj?.$kind === BotElementKind.OnInstallationUpdateActivity || obj?.$kind === BotElementKind.OnInvokeActivity || obj?.$kind === BotElementKind.OnMessageActivity || obj?.$kind === BotElementKind.OnMessageDeleteActivity || obj?.$kind === BotElementKind.OnMessageReactionActivity || obj?.$kind === BotElementKind.OnMessageUpdateActivity || obj?.$kind === BotElementKind.OnTypingActivity || obj?.$kind === BotElementKind.OnAssignEntity || obj?.$kind === BotElementKind.OnBeginDialog || obj?.$kind === BotElementKind.OnCancelDialog || obj?.$kind === BotElementKind.OnChooseEntity || obj?.$kind === BotElementKind.OnChooseProperty || obj?.$kind === BotElementKind.OnEndOfActions || obj?.$kind === BotElementKind.OnError || obj?.$kind === BotElementKind.OnRecognizedIntent || obj?.$kind === BotElementKind.OnIntent || obj?.$kind === BotElementKind.OnChooseIntent || obj?.$kind === BotElementKind.OnRepromptDialog || obj?.$kind === BotElementKind.OnUnknownIntent || obj?.$kind === BotElementKind.OnGreeting || obj?.$kind === BotElementKind.OnTalkToAgent || obj?.$kind === BotElementKind.OnStartOver || obj?.$kind === BotElementKind.OnGoodbye || obj?.$kind === BotElementKind.OnThankYou || obj?.$kind === BotElementKind.OnEndOfConversation || obj?.$kind === BotElementKind.OnAssumedSuccess || obj?.$kind === BotElementKind.OnConfirmedFailure || obj?.$kind === BotElementKind.OnConfirmedSuccess || obj?.$kind === BotElementKind.OnInactivity || obj?.$kind === BotElementKind.OnFallback;

/**
 * Type checker for OnSystemDialogBegin
 */
export const isOnSystemDialogBegin = <T extends BotElement>(
 obj?: T | null
): obj is T & OnSystemDialogBegin => obj?.$kind === BotElementKind.OnEndOfConversation || obj?.$kind === BotElementKind.OnAssumedSuccess || obj?.$kind === BotElementKind.OnConfirmedFailure || obj?.$kind === BotElementKind.OnConfirmedSuccess || obj?.$kind === BotElementKind.OnFallback;

/**
 * Type checker for OnCondition
 */
export const isOnCondition = <T extends BotElement>(
 obj?: T | null
): obj is T & OnCondition => obj?.$kind === BotElementKind.OnCondition;

/**
 * Type checker for OnDialogEventBase
 */
export const isOnDialogEventBase = <T extends BotElement>(
 obj?: T | null
): obj is T & OnDialogEventBase => obj?.$kind === BotElementKind.OnDialogEvent || obj?.$kind === BotElementKind.OnActivity || obj?.$kind === BotElementKind.OnCommandActivity || obj?.$kind === BotElementKind.OnCommandResultActivity || obj?.$kind === BotElementKind.OnConversationUpdateActivity || obj?.$kind === BotElementKind.OnEndOfConversationActivity || obj?.$kind === BotElementKind.OnEventActivity || obj?.$kind === BotElementKind.OnContinueConversation || obj?.$kind === BotElementKind.OnHandoffActivity || obj?.$kind === BotElementKind.OnInstallationUpdateActivity || obj?.$kind === BotElementKind.OnInvokeActivity || obj?.$kind === BotElementKind.OnMessageActivity || obj?.$kind === BotElementKind.OnMessageDeleteActivity || obj?.$kind === BotElementKind.OnMessageReactionActivity || obj?.$kind === BotElementKind.OnMessageUpdateActivity || obj?.$kind === BotElementKind.OnTypingActivity || obj?.$kind === BotElementKind.OnAssignEntity || obj?.$kind === BotElementKind.OnBeginDialog || obj?.$kind === BotElementKind.OnCancelDialog || obj?.$kind === BotElementKind.OnChooseEntity || obj?.$kind === BotElementKind.OnChooseProperty || obj?.$kind === BotElementKind.OnEndOfActions || obj?.$kind === BotElementKind.OnError || obj?.$kind === BotElementKind.OnIntent || obj?.$kind === BotElementKind.OnChooseIntent || obj?.$kind === BotElementKind.OnRepromptDialog || obj?.$kind === BotElementKind.OnUnknownIntent;

/**
 * Type checker for OnDialogEvent
 */
export const isOnDialogEvent = <T extends BotElement>(
 obj?: T | null
): obj is T & OnDialogEvent => obj?.$kind === BotElementKind.OnDialogEvent;

/**
 * Type checker for OnActivityBase
 */
export const isOnActivityBase = <T extends BotElement>(
 obj?: T | null
): obj is T & OnActivityBase => obj?.$kind === BotElementKind.OnActivity || obj?.$kind === BotElementKind.OnCommandActivity || obj?.$kind === BotElementKind.OnCommandResultActivity || obj?.$kind === BotElementKind.OnConversationUpdateActivity || obj?.$kind === BotElementKind.OnEndOfConversationActivity || obj?.$kind === BotElementKind.OnEventActivity || obj?.$kind === BotElementKind.OnContinueConversation || obj?.$kind === BotElementKind.OnHandoffActivity || obj?.$kind === BotElementKind.OnInstallationUpdateActivity || obj?.$kind === BotElementKind.OnInvokeActivity || obj?.$kind === BotElementKind.OnMessageActivity || obj?.$kind === BotElementKind.OnMessageDeleteActivity || obj?.$kind === BotElementKind.OnMessageReactionActivity || obj?.$kind === BotElementKind.OnMessageUpdateActivity || obj?.$kind === BotElementKind.OnTypingActivity;

/**
 * Type checker for OnActivity
 */
export const isOnActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnActivity => obj?.$kind === BotElementKind.OnActivity;

/**
 * Type checker for OnCommandActivity
 */
export const isOnCommandActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnCommandActivity => obj?.$kind === BotElementKind.OnCommandActivity;

/**
 * Type checker for OnCommandResultActivity
 */
export const isOnCommandResultActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnCommandResultActivity => obj?.$kind === BotElementKind.OnCommandResultActivity;

/**
 * Type checker for OnConversationUpdateActivity
 */
export const isOnConversationUpdateActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnConversationUpdateActivity => obj?.$kind === BotElementKind.OnConversationUpdateActivity;

/**
 * Type checker for OnEndOfConversationActivity
 */
export const isOnEndOfConversationActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnEndOfConversationActivity => obj?.$kind === BotElementKind.OnEndOfConversationActivity;

/**
 * Type checker for OnEventActivityBase
 */
export const isOnEventActivityBase = <T extends BotElement>(
 obj?: T | null
): obj is T & OnEventActivityBase => obj?.$kind === BotElementKind.OnEventActivity || obj?.$kind === BotElementKind.OnContinueConversation;

/**
 * Type checker for OnEventActivity
 */
export const isOnEventActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnEventActivity => obj?.$kind === BotElementKind.OnEventActivity;

/**
 * Type checker for OnContinueConversation
 */
export const isOnContinueConversation = <T extends BotElement>(
 obj?: T | null
): obj is T & OnContinueConversation => obj?.$kind === BotElementKind.OnContinueConversation;

/**
 * Type checker for OnHandoffActivity
 */
export const isOnHandoffActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnHandoffActivity => obj?.$kind === BotElementKind.OnHandoffActivity;

/**
 * Type checker for OnInstallationUpdateActivity
 */
export const isOnInstallationUpdateActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnInstallationUpdateActivity => obj?.$kind === BotElementKind.OnInstallationUpdateActivity;

/**
 * Type checker for OnInvokeActivity
 */
export const isOnInvokeActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnInvokeActivity => obj?.$kind === BotElementKind.OnInvokeActivity;

/**
 * Type checker for OnMessageActivity
 */
export const isOnMessageActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnMessageActivity => obj?.$kind === BotElementKind.OnMessageActivity;

/**
 * Type checker for OnMessageDeleteActivity
 */
export const isOnMessageDeleteActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnMessageDeleteActivity => obj?.$kind === BotElementKind.OnMessageDeleteActivity;

/**
 * Type checker for OnMessageReactionActivity
 */
export const isOnMessageReactionActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnMessageReactionActivity => obj?.$kind === BotElementKind.OnMessageReactionActivity;

/**
 * Type checker for OnMessageUpdateActivity
 */
export const isOnMessageUpdateActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnMessageUpdateActivity => obj?.$kind === BotElementKind.OnMessageUpdateActivity;

/**
 * Type checker for OnTypingActivity
 */
export const isOnTypingActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnTypingActivity => obj?.$kind === BotElementKind.OnTypingActivity;

/**
 * Type checker for OnAssignEntity
 */
export const isOnAssignEntity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnAssignEntity => obj?.$kind === BotElementKind.OnAssignEntity;

/**
 * Type checker for OnBeginDialog
 */
export const isOnBeginDialog = <T extends BotElement>(
 obj?: T | null
): obj is T & OnBeginDialog => obj?.$kind === BotElementKind.OnBeginDialog;

/**
 * Type checker for OnCancelDialog
 */
export const isOnCancelDialog = <T extends BotElement>(
 obj?: T | null
): obj is T & OnCancelDialog => obj?.$kind === BotElementKind.OnCancelDialog;

/**
 * Type checker for OnChooseEntity
 */
export const isOnChooseEntity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnChooseEntity => obj?.$kind === BotElementKind.OnChooseEntity;

/**
 * Type checker for OnChooseProperty
 */
export const isOnChooseProperty = <T extends BotElement>(
 obj?: T | null
): obj is T & OnChooseProperty => obj?.$kind === BotElementKind.OnChooseProperty;

/**
 * Type checker for OnEndOfActions
 */
export const isOnEndOfActions = <T extends BotElement>(
 obj?: T | null
): obj is T & OnEndOfActions => obj?.$kind === BotElementKind.OnEndOfActions;

/**
 * Type checker for OnError
 */
export const isOnError = <T extends BotElement>(
 obj?: T | null
): obj is T & OnError => obj?.$kind === BotElementKind.OnError;

/**
 * Type checker for OnRecognizedIntentBase
 */
export const isOnRecognizedIntentBase = <T extends BotElement>(
 obj?: T | null
): obj is T & OnRecognizedIntentBase => obj?.$kind === BotElementKind.OnRecognizedIntent || obj?.$kind === BotElementKind.OnGreeting || obj?.$kind === BotElementKind.OnTalkToAgent || obj?.$kind === BotElementKind.OnStartOver || obj?.$kind === BotElementKind.OnGoodbye || obj?.$kind === BotElementKind.OnThankYou;

/**
 * Type checker for OnRecognizedIntent
 */
export const isOnRecognizedIntent = <T extends BotElement>(
 obj?: T | null
): obj is T & OnRecognizedIntent => obj?.$kind === BotElementKind.OnRecognizedIntent;

/**
 * Type checker for OnIntentBase
 */
export const isOnIntentBase = <T extends BotElement>(
 obj?: T | null
): obj is T & OnIntentBase => obj?.$kind === BotElementKind.OnIntent || obj?.$kind === BotElementKind.OnChooseIntent;

/**
 * Type checker for OnIntent
 */
export const isOnIntent = <T extends BotElement>(
 obj?: T | null
): obj is T & OnIntent => obj?.$kind === BotElementKind.OnIntent;

/**
 * Type checker for OnChooseIntent
 */
export const isOnChooseIntent = <T extends BotElement>(
 obj?: T | null
): obj is T & OnChooseIntent => obj?.$kind === BotElementKind.OnChooseIntent;

/**
 * Type checker for OnRepromptDialog
 */
export const isOnRepromptDialog = <T extends BotElement>(
 obj?: T | null
): obj is T & OnRepromptDialog => obj?.$kind === BotElementKind.OnRepromptDialog;

/**
 * Type checker for OnUnknownIntent
 */
export const isOnUnknownIntent = <T extends BotElement>(
 obj?: T | null
): obj is T & OnUnknownIntent => obj?.$kind === BotElementKind.OnUnknownIntent;

/**
 * Type checker for OnGreeting
 */
export const isOnGreeting = <T extends BotElement>(
 obj?: T | null
): obj is T & OnGreeting => obj?.$kind === BotElementKind.OnGreeting;

/**
 * Type checker for OnTalkToAgent
 */
export const isOnTalkToAgent = <T extends BotElement>(
 obj?: T | null
): obj is T & OnTalkToAgent => obj?.$kind === BotElementKind.OnTalkToAgent;

/**
 * Type checker for OnStartOver
 */
export const isOnStartOver = <T extends BotElement>(
 obj?: T | null
): obj is T & OnStartOver => obj?.$kind === BotElementKind.OnStartOver;

/**
 * Type checker for OnGoodbye
 */
export const isOnGoodbye = <T extends BotElement>(
 obj?: T | null
): obj is T & OnGoodbye => obj?.$kind === BotElementKind.OnGoodbye;

/**
 * Type checker for OnThankYou
 */
export const isOnThankYou = <T extends BotElement>(
 obj?: T | null
): obj is T & OnThankYou => obj?.$kind === BotElementKind.OnThankYou;

/**
 * Type checker for OnEndOfConversation
 */
export const isOnEndOfConversation = <T extends BotElement>(
 obj?: T | null
): obj is T & OnEndOfConversation => obj?.$kind === BotElementKind.OnEndOfConversation;

/**
 * Type checker for OnAssumedSuccess
 */
export const isOnAssumedSuccess = <T extends BotElement>(
 obj?: T | null
): obj is T & OnAssumedSuccess => obj?.$kind === BotElementKind.OnAssumedSuccess;

/**
 * Type checker for OnConfirmedFailure
 */
export const isOnConfirmedFailure = <T extends BotElement>(
 obj?: T | null
): obj is T & OnConfirmedFailure => obj?.$kind === BotElementKind.OnConfirmedFailure;

/**
 * Type checker for OnConfirmedSuccess
 */
export const isOnConfirmedSuccess = <T extends BotElement>(
 obj?: T | null
): obj is T & OnConfirmedSuccess => obj?.$kind === BotElementKind.OnConfirmedSuccess;

/**
 * Type checker for OnInactivity
 */
export const isOnInactivity = <T extends BotElement>(
 obj?: T | null
): obj is T & OnInactivity => obj?.$kind === BotElementKind.OnInactivity;

/**
 * Type checker for OnFallback
 */
export const isOnFallback = <T extends BotElement>(
 obj?: T | null
): obj is T & OnFallback => obj?.$kind === BotElementKind.OnFallback;

/**
 * Type checker for ActionReference
 */
export const isActionReference = <T extends BotElement>(
 obj?: T | null
): obj is T & ActionReference => obj?.$kind === BotElementKind.ActionReference;

/**
 * Type checker for VariableBase
 */
export const isVariableBase = <T extends BotElement>(
 obj?: T | null
): obj is T & VariableBase => obj?.$kind === BotElementKind.StandaloneVariable || obj?.$kind === BotElementKind.Variable;

/**
 * Type checker for StandaloneVariable
 */
export const isStandaloneVariable = <T extends BotElement>(
 obj?: T | null
): obj is T & StandaloneVariable => obj?.$kind === BotElementKind.StandaloneVariable;

/**
 * Type checker for Variable
 */
export const isVariable = <T extends BotElement>(
 obj?: T | null
): obj is T & Variable => obj?.$kind === BotElementKind.Variable;

/**
 * Type checker for VariableInitializer
 */
export const isVariableInitializer = <T extends BotElement>(
 obj?: T | null
): obj is T & VariableInitializer => obj?.$kind === BotElementKind.ActionInitializer || obj?.$kind === BotElementKind.ExpressionInitializer;

/**
 * Type checker for ActionInitializer
 */
export const isActionInitializer = <T extends BotElement>(
 obj?: T | null
): obj is T & ActionInitializer => obj?.$kind === BotElementKind.ActionInitializer;

/**
 * Type checker for ExpressionInitializer
 */
export const isExpressionInitializer = <T extends BotElement>(
 obj?: T | null
): obj is T & ExpressionInitializer => obj?.$kind === BotElementKind.ExpressionInitializer;

/**
 * Type checker for Dialog
 */
export const isDialog = <T extends BotElement>(
 obj?: T | null
): obj is T & Dialog => obj?.$kind === BotElementKind.AdaptiveDialog;

/**
 * Type checker for AdaptiveDialog
 */
export const isAdaptiveDialog = <T extends BotElement>(
 obj?: T | null
): obj is T & AdaptiveDialog => obj?.$kind === BotElementKind.AdaptiveDialog;

/**
 * Type checker for DialogAction
 */
export const isDialogAction = <T extends BotElement>(
 obj?: T | null
): obj is T & DialogAction => obj?.$kind === BotElementKind.InvokeFlowAction || obj?.$kind === BotElementKind.InvokeSkillAction || obj?.$kind === BotElementKind.Question || obj?.$kind === BotElementKind.CSATQuestion || obj?.$kind === BotElementKind.AttachmentInput || obj?.$kind === BotElementKind.ChoiceInput || obj?.$kind === BotElementKind.ConfirmInput || obj?.$kind === BotElementKind.DateTimeInput || obj?.$kind === BotElementKind.NumberInput || obj?.$kind === BotElementKind.OAuthInput || obj?.$kind === BotElementKind.TextInput || obj?.$kind === BotElementKind.ActionScope || obj?.$kind === BotElementKind.Case || obj?.$kind === BotElementKind.Foreach || obj?.$kind === BotElementKind.ForeachPage || obj?.$kind === BotElementKind.BeginDialog || obj?.$kind === BotElementKind.RepeatDialog || obj?.$kind === BotElementKind.ReplaceDialog || obj?.$kind === BotElementKind.BreakLoop || obj?.$kind === BotElementKind.CancelAllDialogs || obj?.$kind === BotElementKind.CancelDialog || obj?.$kind === BotElementKind.ClearAllVariables || obj?.$kind === BotElementKind.ContinueLoop || obj?.$kind === BotElementKind.DebugBreak || obj?.$kind === BotElementKind.DeleteActivity || obj?.$kind === BotElementKind.DeleteProperties || obj?.$kind === BotElementKind.DeleteProperty || obj?.$kind === BotElementKind.EditArray || obj?.$kind === BotElementKind.EmitEvent || obj?.$kind === BotElementKind.EndDialog || obj?.$kind === BotElementKind.EndTurn || obj?.$kind === BotElementKind.GetActivityMembers || obj?.$kind === BotElementKind.GetConversationMembers || obj?.$kind === BotElementKind.GotoAction || obj?.$kind === BotElementKind.HttpRequest || obj?.$kind === BotElementKind.IfCondition || obj?.$kind === BotElementKind.Condition || obj?.$kind === BotElementKind.EndConversation || obj?.$kind === BotElementKind.SendMessage || obj?.$kind === BotElementKind.SendActivity || obj?.$kind === BotElementKind.SendHandoffActivity || obj?.$kind === BotElementKind.SetProperties || obj?.$kind === BotElementKind.SetProperty || obj?.$kind === BotElementKind.SignOutUser || obj?.$kind === BotElementKind.SwitchCondition || obj?.$kind === BotElementKind.TelemetryTrackEventAction || obj?.$kind === BotElementKind.TraceActivity || obj?.$kind === BotElementKind.UpdateActivity || obj?.$kind === BotElementKind.DisconnectedNodeContainer;

/**
 * Type checker for ExternalAction
 */
export const isExternalAction = <T extends BotElement>(
 obj?: T | null
): obj is T & ExternalAction => obj?.$kind === BotElementKind.InvokeFlowAction || obj?.$kind === BotElementKind.InvokeSkillAction;

/**
 * Type checker for InvokeFlowAction
 */
export const isInvokeFlowAction = <T extends BotElement>(
 obj?: T | null
): obj is T & InvokeFlowAction => obj?.$kind === BotElementKind.InvokeFlowAction;

/**
 * Type checker for InvokeSkillAction
 */
export const isInvokeSkillAction = <T extends BotElement>(
 obj?: T | null
): obj is T & InvokeSkillAction => obj?.$kind === BotElementKind.InvokeSkillAction;

/**
 * Type checker for InputDialog
 */
export const isInputDialog = <T extends BotElement>(
 obj?: T | null
): obj is T & InputDialog => obj?.$kind === BotElementKind.Question || obj?.$kind === BotElementKind.AttachmentInput || obj?.$kind === BotElementKind.ChoiceInput || obj?.$kind === BotElementKind.ConfirmInput || obj?.$kind === BotElementKind.DateTimeInput || obj?.$kind === BotElementKind.NumberInput || obj?.$kind === BotElementKind.TextInput;

/**
 * Type checker for Question
 */
export const isQuestion = <T extends BotElement>(
 obj?: T | null
): obj is T & Question => obj?.$kind === BotElementKind.Question;

/**
 * Type checker for CSATQuestion
 */
export const isCSATQuestion = <T extends BotElement>(
 obj?: T | null
): obj is T & CSATQuestion => obj?.$kind === BotElementKind.CSATQuestion;

/**
 * Type checker for AttachmentInput
 */
export const isAttachmentInput = <T extends BotElement>(
 obj?: T | null
): obj is T & AttachmentInput => obj?.$kind === BotElementKind.AttachmentInput;

/**
 * Type checker for ChoiceInput
 */
export const isChoiceInput = <T extends BotElement>(
 obj?: T | null
): obj is T & ChoiceInput => obj?.$kind === BotElementKind.ChoiceInput;

/**
 * Type checker for ConfirmInput
 */
export const isConfirmInput = <T extends BotElement>(
 obj?: T | null
): obj is T & ConfirmInput => obj?.$kind === BotElementKind.ConfirmInput;

/**
 * Type checker for DateTimeInput
 */
export const isDateTimeInput = <T extends BotElement>(
 obj?: T | null
): obj is T & DateTimeInput => obj?.$kind === BotElementKind.DateTimeInput;

/**
 * Type checker for NumberInput
 */
export const isNumberInput = <T extends BotElement>(
 obj?: T | null
): obj is T & NumberInput => obj?.$kind === BotElementKind.NumberInput;

/**
 * Type checker for OAuthInput
 */
export const isOAuthInput = <T extends BotElement>(
 obj?: T | null
): obj is T & OAuthInput => obj?.$kind === BotElementKind.OAuthInput;

/**
 * Type checker for TextInput
 */
export const isTextInput = <T extends BotElement>(
 obj?: T | null
): obj is T & TextInput => obj?.$kind === BotElementKind.TextInput;

/**
 * Type checker for ActionScopeBase
 */
export const isActionScopeBase = <T extends BotElement>(
 obj?: T | null
): obj is T & ActionScopeBase => obj?.$kind === BotElementKind.ActionScope || obj?.$kind === BotElementKind.Case || obj?.$kind === BotElementKind.Foreach || obj?.$kind === BotElementKind.ForeachPage || obj?.$kind === BotElementKind.DisconnectedNodeContainer;

/**
 * Type checker for ActionScope
 */
export const isActionScope = <T extends BotElement>(
 obj?: T | null
): obj is T & ActionScope => obj?.$kind === BotElementKind.ActionScope;

/**
 * Type checker for Case
 */
export const isCase = <T extends BotElement>(
 obj?: T | null
): obj is T & Case => obj?.$kind === BotElementKind.Case;

/**
 * Type checker for Foreach
 */
export const isForeach = <T extends BotElement>(
 obj?: T | null
): obj is T & Foreach => obj?.$kind === BotElementKind.Foreach;

/**
 * Type checker for ForeachPage
 */
export const isForeachPage = <T extends BotElement>(
 obj?: T | null
): obj is T & ForeachPage => obj?.$kind === BotElementKind.ForeachPage;

/**
 * Type checker for BaseInvokeDialogOrSelf
 */
export const isBaseInvokeDialogOrSelf = <T extends BotElement>(
 obj?: T | null
): obj is T & BaseInvokeDialogOrSelf => obj?.$kind === BotElementKind.BeginDialog || obj?.$kind === BotElementKind.RepeatDialog || obj?.$kind === BotElementKind.ReplaceDialog;

/**
 * Type checker for BaseInvokeDialog
 */
export const isBaseInvokeDialog = <T extends BotElement>(
 obj?: T | null
): obj is T & BaseInvokeDialog => obj?.$kind === BotElementKind.BeginDialog || obj?.$kind === BotElementKind.ReplaceDialog;

/**
 * Type checker for BeginDialog
 */
export const isBeginDialog = <T extends BotElement>(
 obj?: T | null
): obj is T & BeginDialog => obj?.$kind === BotElementKind.BeginDialog;

/**
 * Type checker for RepeatDialog
 */
export const isRepeatDialog = <T extends BotElement>(
 obj?: T | null
): obj is T & RepeatDialog => obj?.$kind === BotElementKind.RepeatDialog;

/**
 * Type checker for ReplaceDialog
 */
export const isReplaceDialog = <T extends BotElement>(
 obj?: T | null
): obj is T & ReplaceDialog => obj?.$kind === BotElementKind.ReplaceDialog;

/**
 * Type checker for BreakLoop
 */
export const isBreakLoop = <T extends BotElement>(
 obj?: T | null
): obj is T & BreakLoop => obj?.$kind === BotElementKind.BreakLoop;

/**
 * Type checker for CancelAllDialogsBase
 */
export const isCancelAllDialogsBase = <T extends BotElement>(
 obj?: T | null
): obj is T & CancelAllDialogsBase => obj?.$kind === BotElementKind.CancelAllDialogs || obj?.$kind === BotElementKind.CancelDialog;

/**
 * Type checker for CancelAllDialogs
 */
export const isCancelAllDialogs = <T extends BotElement>(
 obj?: T | null
): obj is T & CancelAllDialogs => obj?.$kind === BotElementKind.CancelAllDialogs;

/**
 * Type checker for CancelDialog
 */
export const isCancelDialog = <T extends BotElement>(
 obj?: T | null
): obj is T & CancelDialog => obj?.$kind === BotElementKind.CancelDialog;

/**
 * Type checker for ClearAllVariables
 */
export const isClearAllVariables = <T extends BotElement>(
 obj?: T | null
): obj is T & ClearAllVariables => obj?.$kind === BotElementKind.ClearAllVariables;

/**
 * Type checker for ContinueLoop
 */
export const isContinueLoop = <T extends BotElement>(
 obj?: T | null
): obj is T & ContinueLoop => obj?.$kind === BotElementKind.ContinueLoop;

/**
 * Type checker for DebugBreak
 */
export const isDebugBreak = <T extends BotElement>(
 obj?: T | null
): obj is T & DebugBreak => obj?.$kind === BotElementKind.DebugBreak;

/**
 * Type checker for DeleteActivity
 */
export const isDeleteActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & DeleteActivity => obj?.$kind === BotElementKind.DeleteActivity;

/**
 * Type checker for DeleteProperties
 */
export const isDeleteProperties = <T extends BotElement>(
 obj?: T | null
): obj is T & DeleteProperties => obj?.$kind === BotElementKind.DeleteProperties;

/**
 * Type checker for DeleteProperty
 */
export const isDeleteProperty = <T extends BotElement>(
 obj?: T | null
): obj is T & DeleteProperty => obj?.$kind === BotElementKind.DeleteProperty;

/**
 * Type checker for EditArray
 */
export const isEditArray = <T extends BotElement>(
 obj?: T | null
): obj is T & EditArray => obj?.$kind === BotElementKind.EditArray;

/**
 * Type checker for EmitEvent
 */
export const isEmitEvent = <T extends BotElement>(
 obj?: T | null
): obj is T & EmitEvent => obj?.$kind === BotElementKind.EmitEvent;

/**
 * Type checker for EndDialog
 */
export const isEndDialog = <T extends BotElement>(
 obj?: T | null
): obj is T & EndDialog => obj?.$kind === BotElementKind.EndDialog;

/**
 * Type checker for EndTurn
 */
export const isEndTurn = <T extends BotElement>(
 obj?: T | null
): obj is T & EndTurn => obj?.$kind === BotElementKind.EndTurn;

/**
 * Type checker for GetActivityMembers
 */
export const isGetActivityMembers = <T extends BotElement>(
 obj?: T | null
): obj is T & GetActivityMembers => obj?.$kind === BotElementKind.GetActivityMembers;

/**
 * Type checker for GetConversationMembers
 */
export const isGetConversationMembers = <T extends BotElement>(
 obj?: T | null
): obj is T & GetConversationMembers => obj?.$kind === BotElementKind.GetConversationMembers;

/**
 * Type checker for GotoAction
 */
export const isGotoAction = <T extends BotElement>(
 obj?: T | null
): obj is T & GotoAction => obj?.$kind === BotElementKind.GotoAction;

/**
 * Type checker for HttpRequest
 */
export const isHttpRequest = <T extends BotElement>(
 obj?: T | null
): obj is T & HttpRequest => obj?.$kind === BotElementKind.HttpRequest;

/**
 * Type checker for IfCondition
 */
export const isIfCondition = <T extends BotElement>(
 obj?: T | null
): obj is T & IfCondition => obj?.$kind === BotElementKind.IfCondition;

/**
 * Type checker for Condition
 */
export const isCondition = <T extends BotElement>(
 obj?: T | null
): obj is T & Condition => obj?.$kind === BotElementKind.Condition;

/**
 * Type checker for ConditionItem
 */
export const isConditionItem = <T extends BotElement>(
 obj?: T | null
): obj is T & ConditionItem => obj?.$kind === BotElementKind.ConditionItem;

/**
 * Type checker for EndConversation
 */
export const isEndConversation = <T extends BotElement>(
 obj?: T | null
): obj is T & EndConversation => obj?.$kind === BotElementKind.EndConversation;

/**
 * Type checker for SendMessage
 */
export const isSendMessage = <T extends BotElement>(
 obj?: T | null
): obj is T & SendMessage => obj?.$kind === BotElementKind.SendMessage;

/**
 * Type checker for SendActivity
 */
export const isSendActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & SendActivity => obj?.$kind === BotElementKind.SendActivity;

/**
 * Type checker for HandoffContext
 */
export const isHandoffContext = <T extends BotElement>(
 obj?: T | null
): obj is T & HandoffContext => obj?.$kind === BotElementKind.ExpressionHandoffContext || obj?.$kind === BotElementKind.AutomaticHandoffContext;

/**
 * Type checker for ExpressionHandoffContext
 */
export const isExpressionHandoffContext = <T extends BotElement>(
 obj?: T | null
): obj is T & ExpressionHandoffContext => obj?.$kind === BotElementKind.ExpressionHandoffContext;

/**
 * Type checker for AutomaticHandoffContext
 */
export const isAutomaticHandoffContext = <T extends BotElement>(
 obj?: T | null
): obj is T & AutomaticHandoffContext => obj?.$kind === BotElementKind.AutomaticHandoffContext;

/**
 * Type checker for SendHandoffActivity
 */
export const isSendHandoffActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & SendHandoffActivity => obj?.$kind === BotElementKind.SendHandoffActivity;

/**
 * Type checker for SetProperties
 */
export const isSetProperties = <T extends BotElement>(
 obj?: T | null
): obj is T & SetProperties => obj?.$kind === BotElementKind.SetProperties;

/**
 * Type checker for SetProperty
 */
export const isSetProperty = <T extends BotElement>(
 obj?: T | null
): obj is T & SetProperty => obj?.$kind === BotElementKind.SetProperty;

/**
 * Type checker for SignOutUser
 */
export const isSignOutUser = <T extends BotElement>(
 obj?: T | null
): obj is T & SignOutUser => obj?.$kind === BotElementKind.SignOutUser;

/**
 * Type checker for SwitchCondition
 */
export const isSwitchCondition = <T extends BotElement>(
 obj?: T | null
): obj is T & SwitchCondition => obj?.$kind === BotElementKind.SwitchCondition;

/**
 * Type checker for TelemetryTrackEventAction
 */
export const isTelemetryTrackEventAction = <T extends BotElement>(
 obj?: T | null
): obj is T & TelemetryTrackEventAction => obj?.$kind === BotElementKind.TelemetryTrackEventAction;

/**
 * Type checker for TraceActivity
 */
export const isTraceActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & TraceActivity => obj?.$kind === BotElementKind.TraceActivity;

/**
 * Type checker for UpdateActivity
 */
export const isUpdateActivity = <T extends BotElement>(
 obj?: T | null
): obj is T & UpdateActivity => obj?.$kind === BotElementKind.UpdateActivity;

/**
 * Type checker for DisconnectedNodeContainer
 */
export const isDisconnectedNodeContainer = <T extends BotElement>(
 obj?: T | null
): obj is T & DisconnectedNodeContainer => obj?.$kind === BotElementKind.DisconnectedNodeContainer;

/**
 * Type checker for CardActionDefinition
 */
export const isCardActionDefinition = <T extends BotElement>(
 obj?: T | null
): obj is T & CardActionDefinition => obj?.$kind === BotElementKind.CardActionDefinition;

/**
 * Type checker for PropertyAssignment
 */
export const isPropertyAssignment = <T extends BotElement>(
 obj?: T | null
): obj is T & PropertyAssignment => obj?.$kind === BotElementKind.PropertyAssignment;

/**
 * Type checker for ActionInputBinding
 */
export const isActionInputBinding = <T extends BotElement>(
 obj?: T | null
): obj is T & ActionInputBinding => obj?.$kind === BotElementKind.ActionInputBinding;

/**
 * Type checker for ActionOutputBinding
 */
export const isActionOutputBinding = <T extends BotElement>(
 obj?: T | null
): obj is T & ActionOutputBinding => obj?.$kind === BotElementKind.ActionOutputBinding;

/**
 * Type checker for DiagnosticResult
 */
export const isDiagnosticResult = <T extends DiagnosticResult>(
 obj?: T | null
): obj is T & DiagnosticResult => obj?.$kind === DiagnosticResultKind.ComponentDiagnosticResult || obj?.$kind === DiagnosticResultKind.ActionReferenceDiagnosticResult;

/**
 * Type checker for ComponentDiagnosticResult
 */
export const isComponentDiagnosticResult = <T extends DiagnosticResult>(
 obj?: T | null
): obj is T & ComponentDiagnosticResult => obj?.$kind === DiagnosticResultKind.ComponentDiagnosticResult;

/**
 * Type checker for ActionReferenceDiagnosticResult
 */
export const isActionReferenceDiagnosticResult = <T extends DiagnosticResult>(
 obj?: T | null
): obj is T & ActionReferenceDiagnosticResult => obj?.$kind === DiagnosticResultKind.ActionReferenceDiagnosticResult;

/**
 * Type checker for ContentShareContext
 */
export const isContentShareContext = <T extends BotElement>(
 obj?: T | null
): obj is T & ContentShareContext => obj?.$kind === BotElementKind.ContentShareContext;

/**
 * Type checker for ManagedProperties
 */
export const isManagedProperties = <T extends BotElement>(
 obj?: T | null
): obj is T & ManagedProperties => obj?.$kind === BotElementKind.ManagedProperties;

/**
 * Type checker for LanguageUnderstandingElement
 */
export const isLanguageUnderstandingElement = <T extends BotElement>(
 obj?: T | null
): obj is T & LanguageUnderstandingElement => obj?.$kind === BotElementKind.EmbeddedEntity || obj?.$kind === BotElementKind.PrebuiltEntityReference || obj?.$kind === BotElementKind.RegexEntityReference || obj?.$kind === BotElementKind.ClosedListEntityReference || obj?.$kind === BotElementKind.RegexEntity || obj?.$kind === BotElementKind.ClosedListEntity || obj?.$kind === BotElementKind.ClosedListItem;

/**
 * Type checker for EntityReference
 */
export const isEntityReference = <T extends BotElement>(
 obj?: T | null
): obj is T & EntityReference => obj?.$kind === BotElementKind.EmbeddedEntity || obj?.$kind === BotElementKind.PrebuiltEntityReference || obj?.$kind === BotElementKind.RegexEntityReference || obj?.$kind === BotElementKind.ClosedListEntityReference;

/**
 * Type checker for EmbeddedEntity
 */
export const isEmbeddedEntity = <T extends BotElement>(
 obj?: T | null
): obj is T & EmbeddedEntity => obj?.$kind === BotElementKind.EmbeddedEntity;

/**
 * Type checker for PrebuiltEntityReference
 */
export const isPrebuiltEntityReference = <T extends BotElement>(
 obj?: T | null
): obj is T & PrebuiltEntityReference => obj?.$kind === BotElementKind.PrebuiltEntityReference;

/**
 * Type checker for RegexEntityReference
 */
export const isRegexEntityReference = <T extends BotElement>(
 obj?: T | null
): obj is T & RegexEntityReference => obj?.$kind === BotElementKind.RegexEntityReference;

/**
 * Type checker for ClosedListEntityReference
 */
export const isClosedListEntityReference = <T extends BotElement>(
 obj?: T | null
): obj is T & ClosedListEntityReference => obj?.$kind === BotElementKind.ClosedListEntityReference;

/**
 * Type checker for Entity
 */
export const isEntity = <T extends BotElement>(
 obj?: T | null
): obj is T & Entity => obj?.$kind === BotElementKind.RegexEntity || obj?.$kind === BotElementKind.ClosedListEntity;

/**
 * Type checker for RegexEntity
 */
export const isRegexEntity = <T extends BotElement>(
 obj?: T | null
): obj is T & RegexEntity => obj?.$kind === BotElementKind.RegexEntity;

/**
 * Type checker for ClosedListEntity
 */
export const isClosedListEntity = <T extends BotElement>(
 obj?: T | null
): obj is T & ClosedListEntity => obj?.$kind === BotElementKind.ClosedListEntity;

/**
 * Type checker for ClosedListItem
 */
export const isClosedListItem = <T extends BotElement>(
 obj?: T | null
): obj is T & ClosedListItem => obj?.$kind === BotElementKind.ClosedListItem;

/**
 * Type checker for LanguageGenerationElement
 */
export const isLanguageGenerationElement = <T extends BotElement>(
 obj?: T | null
): obj is T & LanguageGenerationElement => obj?.$kind === BotElementKind.TextSegment || obj?.$kind === BotElementKind.ExpressionSegment || obj?.$kind === BotElementKind.TemplateLine || obj?.$kind === BotElementKind.TemplateReference || obj?.$kind === BotElementKind.LanguageGenerationTemplate || obj?.$kind === BotElementKind.NormalTemplateBody || obj?.$kind === BotElementKind.TemplateSwitchCase || obj?.$kind === BotElementKind.TemplateIfCondition || obj?.$kind === BotElementKind.IfElseTemplateBody || obj?.$kind === BotElementKind.SwitchTemplateBody || obj?.$kind === BotElementKind.StructuredTemplateInvocation || obj?.$kind === BotElementKind.StructuredPropertyWithLine || obj?.$kind === BotElementKind.StructuredPropertyWithList || obj?.$kind === BotElementKind.StructuredTemplateBody || obj?.$kind === BotElementKind.ActivityTemplate || obj?.$kind === BotElementKind.MessageActivityTemplate || obj?.$kind === BotElementKind.VideoCardTemplate || obj?.$kind === BotElementKind.ImageCardTemplate || obj?.$kind === BotElementKind.AdaptiveCardTemplate || obj?.$kind === BotElementKind.HeroCardTemplate;

/**
 * Type checker for TemplateSegment
 */
export const isTemplateSegment = <T extends BotElement>(
 obj?: T | null
): obj is T & TemplateSegment => obj?.$kind === BotElementKind.TextSegment || obj?.$kind === BotElementKind.ExpressionSegment;

/**
 * Type checker for TextSegment
 */
export const isTextSegment = <T extends BotElement>(
 obj?: T | null
): obj is T & TextSegment => obj?.$kind === BotElementKind.TextSegment;

/**
 * Type checker for ExpressionSegment
 */
export const isExpressionSegment = <T extends BotElement>(
 obj?: T | null
): obj is T & ExpressionSegment => obj?.$kind === BotElementKind.ExpressionSegment;

/**
 * Type checker for TemplateLine
 */
export const isTemplateLine = <T extends BotElement>(
 obj?: T | null
): obj is T & TemplateLine => obj?.$kind === BotElementKind.TemplateLine;

/**
 * Type checker for TemplateReference
 */
export const isTemplateReference = <T extends BotElement>(
 obj?: T | null
): obj is T & TemplateReference => obj?.$kind === BotElementKind.TemplateReference;

/**
 * Type checker for LanguageGenerationTemplate
 */
export const isLanguageGenerationTemplate = <T extends BotElement>(
 obj?: T | null
): obj is T & LanguageGenerationTemplate => obj?.$kind === BotElementKind.LanguageGenerationTemplate;

/**
 * Type checker for TemplateBody
 */
export const isTemplateBody = <T extends BotElement>(
 obj?: T | null
): obj is T & TemplateBody => obj?.$kind === BotElementKind.NormalTemplateBody || obj?.$kind === BotElementKind.IfElseTemplateBody || obj?.$kind === BotElementKind.SwitchTemplateBody || obj?.$kind === BotElementKind.StructuredTemplateBody;

/**
 * Type checker for NormalTemplateBody
 */
export const isNormalTemplateBody = <T extends BotElement>(
 obj?: T | null
): obj is T & NormalTemplateBody => obj?.$kind === BotElementKind.NormalTemplateBody;

/**
 * Type checker for TemplateSwitchCase
 */
export const isTemplateSwitchCase = <T extends BotElement>(
 obj?: T | null
): obj is T & TemplateSwitchCase => obj?.$kind === BotElementKind.TemplateSwitchCase;

/**
 * Type checker for TemplateIfCondition
 */
export const isTemplateIfCondition = <T extends BotElement>(
 obj?: T | null
): obj is T & TemplateIfCondition => obj?.$kind === BotElementKind.TemplateIfCondition;

/**
 * Type checker for IfElseTemplateBody
 */
export const isIfElseTemplateBody = <T extends BotElement>(
 obj?: T | null
): obj is T & IfElseTemplateBody => obj?.$kind === BotElementKind.IfElseTemplateBody;

/**
 * Type checker for SwitchTemplateBody
 */
export const isSwitchTemplateBody = <T extends BotElement>(
 obj?: T | null
): obj is T & SwitchTemplateBody => obj?.$kind === BotElementKind.SwitchTemplateBody;

/**
 * Type checker for PropertyEntry
 */
export const isPropertyEntry = <T extends BotElement>(
 obj?: T | null
): obj is T & PropertyEntry => obj?.$kind === BotElementKind.StructuredTemplateInvocation || obj?.$kind === BotElementKind.StructuredPropertyWithLine || obj?.$kind === BotElementKind.StructuredPropertyWithList;

/**
 * Type checker for StructuredTemplateInvocation
 */
export const isStructuredTemplateInvocation = <T extends BotElement>(
 obj?: T | null
): obj is T & StructuredTemplateInvocation => obj?.$kind === BotElementKind.StructuredTemplateInvocation;

/**
 * Type checker for StructuredProperty
 */
export const isStructuredProperty = <T extends BotElement>(
 obj?: T | null
): obj is T & StructuredProperty => obj?.$kind === BotElementKind.StructuredPropertyWithLine || obj?.$kind === BotElementKind.StructuredPropertyWithList;

/**
 * Type checker for StructuredPropertyWithLine
 */
export const isStructuredPropertyWithLine = <T extends BotElement>(
 obj?: T | null
): obj is T & StructuredPropertyWithLine => obj?.$kind === BotElementKind.StructuredPropertyWithLine;

/**
 * Type checker for StructuredPropertyWithList
 */
export const isStructuredPropertyWithList = <T extends BotElement>(
 obj?: T | null
): obj is T & StructuredPropertyWithList => obj?.$kind === BotElementKind.StructuredPropertyWithList;

/**
 * Type checker for StructuredTemplateBody
 */
export const isStructuredTemplateBody = <T extends BotElement>(
 obj?: T | null
): obj is T & StructuredTemplateBody => obj?.$kind === BotElementKind.StructuredTemplateBody;

/**
 * Type checker for ActivityTemplateBase
 */
export const isActivityTemplateBase = <T extends BotElement>(
 obj?: T | null
): obj is T & ActivityTemplateBase => obj?.$kind === BotElementKind.ActivityTemplate || obj?.$kind === BotElementKind.MessageActivityTemplate;

/**
 * Type checker for ActivityTemplate
 */
export const isActivityTemplate = <T extends BotElement>(
 obj?: T | null
): obj is T & ActivityTemplate => obj?.$kind === BotElementKind.ActivityTemplate;

/**
 * Type checker for MessageActivityTemplate
 */
export const isMessageActivityTemplate = <T extends BotElement>(
 obj?: T | null
): obj is T & MessageActivityTemplate => obj?.$kind === BotElementKind.MessageActivityTemplate;

/**
 * Type checker for ActivityAttachment
 */
export const isActivityAttachment = <T extends BotElement>(
 obj?: T | null
): obj is T & ActivityAttachment => obj?.$kind === BotElementKind.VideoCardTemplate || obj?.$kind === BotElementKind.ImageCardTemplate || obj?.$kind === BotElementKind.AdaptiveCardTemplate || obj?.$kind === BotElementKind.HeroCardTemplate;

/**
 * Type checker for VideoCardTemplate
 */
export const isVideoCardTemplate = <T extends BotElement>(
 obj?: T | null
): obj is T & VideoCardTemplate => obj?.$kind === BotElementKind.VideoCardTemplate;

/**
 * Type checker for ImageCardTemplate
 */
export const isImageCardTemplate = <T extends BotElement>(
 obj?: T | null
): obj is T & ImageCardTemplate => obj?.$kind === BotElementKind.ImageCardTemplate;

/**
 * Type checker for AdaptiveCardTemplate
 */
export const isAdaptiveCardTemplate = <T extends BotElement>(
 obj?: T | null
): obj is T & AdaptiveCardTemplate => obj?.$kind === BotElementKind.AdaptiveCardTemplate;

/**
 * Type checker for HeroCardTemplate
 */
export const isHeroCardTemplate = <T extends BotElement>(
 obj?: T | null
): obj is T & HeroCardTemplate => obj?.$kind === BotElementKind.HeroCardTemplate;

/**
 * Type checker for DataType
 */
export const isDataType = <T extends DataType>(
 obj?: T | null
): obj is T & DataType => obj?.$kind === DataTypeKind.UnspecifiedDataType || obj?.$kind === DataTypeKind.BlankType || obj?.$kind === DataTypeKind.BooleanDataType || obj?.$kind === DataTypeKind.NumberDataType || obj?.$kind === DataTypeKind.StringDataType || obj?.$kind === DataTypeKind.TimeSpanDataType || obj?.$kind === DataTypeKind.DateTimeDataType || obj?.$kind === DataTypeKind.AnyType || obj?.$kind === DataTypeKind.TableDataType || obj?.$kind === DataTypeKind.RecordDataType || obj?.$kind === DataTypeKind.ClosedListOptionSetDataType || obj?.$kind === DataTypeKind.EmbeddedOptionSetDataType || obj?.$kind === DataTypeKind.SystemOptionSetDataType;

/**
 * Type checker for UnspecifiedDataType
 */
export const isUnspecifiedDataType = <T extends DataType>(
 obj?: T | null
): obj is T & UnspecifiedDataType => obj?.$kind === DataTypeKind.UnspecifiedDataType;

/**
 * Type checker for BlankType
 */
export const isBlankType = <T extends DataType>(
 obj?: T | null
): obj is T & BlankType => obj?.$kind === DataTypeKind.BlankType;

/**
 * Type checker for BooleanDataType
 */
export const isBooleanDataType = <T extends DataType>(
 obj?: T | null
): obj is T & BooleanDataType => obj?.$kind === DataTypeKind.BooleanDataType;

/**
 * Type checker for NumberDataType
 */
export const isNumberDataType = <T extends DataType>(
 obj?: T | null
): obj is T & NumberDataType => obj?.$kind === DataTypeKind.NumberDataType;

/**
 * Type checker for StringDataType
 */
export const isStringDataType = <T extends DataType>(
 obj?: T | null
): obj is T & StringDataType => obj?.$kind === DataTypeKind.StringDataType;

/**
 * Type checker for TimeSpanDataType
 */
export const isTimeSpanDataType = <T extends DataType>(
 obj?: T | null
): obj is T & TimeSpanDataType => obj?.$kind === DataTypeKind.TimeSpanDataType;

/**
 * Type checker for DateTimeDataType
 */
export const isDateTimeDataType = <T extends DataType>(
 obj?: T | null
): obj is T & DateTimeDataType => obj?.$kind === DataTypeKind.DateTimeDataType;

/**
 * Type checker for AnyType
 */
export const isAnyType = <T extends DataType>(
 obj?: T | null
): obj is T & AnyType => obj?.$kind === DataTypeKind.AnyType;

/**
 * Type checker for AggregateDataType
 */
export const isAggregateDataType = <T extends DataType>(
 obj?: T | null
): obj is T & AggregateDataType => obj?.$kind === DataTypeKind.TableDataType || obj?.$kind === DataTypeKind.RecordDataType;

/**
 * Type checker for TableDataType
 */
export const isTableDataType = <T extends DataType>(
 obj?: T | null
): obj is T & TableDataType => obj?.$kind === DataTypeKind.TableDataType;

/**
 * Type checker for RecordDataType
 */
export const isRecordDataType = <T extends DataType>(
 obj?: T | null
): obj is T & RecordDataType => obj?.$kind === DataTypeKind.RecordDataType;

/**
 * Type checker for OptionSetDataType
 */
export const isOptionSetDataType = <T extends DataType>(
 obj?: T | null
): obj is T & OptionSetDataType => obj?.$kind === DataTypeKind.ClosedListOptionSetDataType || obj?.$kind === DataTypeKind.EmbeddedOptionSetDataType || obj?.$kind === DataTypeKind.SystemOptionSetDataType;

/**
 * Type checker for ClosedListOptionSetDataType
 */
export const isClosedListOptionSetDataType = <T extends DataType>(
 obj?: T | null
): obj is T & ClosedListOptionSetDataType => obj?.$kind === DataTypeKind.ClosedListOptionSetDataType;

/**
 * Type checker for EmbeddedOptionSetDataType
 */
export const isEmbeddedOptionSetDataType = <T extends DataType>(
 obj?: T | null
): obj is T & EmbeddedOptionSetDataType => obj?.$kind === DataTypeKind.EmbeddedOptionSetDataType;

/**
 * Type checker for SystemOptionSetDataType
 */
export const isSystemOptionSetDataType = <T extends DataType>(
 obj?: T | null
): obj is T & SystemOptionSetDataType => obj?.$kind === DataTypeKind.SystemOptionSetDataType;

/**
 * Type checker for BotElementDiagnostic
 */
export const isBotElementDiagnostic = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & BotElementDiagnostic => obj?.$kind === BotElementDiagnosticKind.IncorrectTypeError || obj?.$kind === BotElementDiagnosticKind.ExpressionError || obj?.$kind === BotElementDiagnosticKind.InvalidVariableType || obj?.$kind === BotElementDiagnosticKind.PropertyError || obj?.$kind === BotElementDiagnosticKind.ListPropertyItemError || obj?.$kind === BotElementDiagnosticKind.DictionaryPropertyItemError || obj?.$kind === BotElementDiagnosticKind.InvalidReferenceError || obj?.$kind === BotElementDiagnosticKind.BindingKeyNotFoundError || obj?.$kind === BotElementDiagnosticKind.BindingIncorrectTypeError || obj?.$kind === BotElementDiagnosticKind.ReadOnlyVariableMutationError || obj?.$kind === BotElementDiagnosticKind.UnknownElementError || obj?.$kind === BotElementDiagnosticKind.VariableInformationDiagnostic;

/**
 * Type checker for BotElementIssue
 */
export const isBotElementIssue = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & BotElementIssue => obj?.$kind === BotElementDiagnosticKind.IncorrectTypeError || obj?.$kind === BotElementDiagnosticKind.ExpressionError || obj?.$kind === BotElementDiagnosticKind.InvalidVariableType || obj?.$kind === BotElementDiagnosticKind.PropertyError || obj?.$kind === BotElementDiagnosticKind.ListPropertyItemError || obj?.$kind === BotElementDiagnosticKind.DictionaryPropertyItemError || obj?.$kind === BotElementDiagnosticKind.InvalidReferenceError || obj?.$kind === BotElementDiagnosticKind.BindingKeyNotFoundError || obj?.$kind === BotElementDiagnosticKind.BindingIncorrectTypeError || obj?.$kind === BotElementDiagnosticKind.ReadOnlyVariableMutationError || obj?.$kind === BotElementDiagnosticKind.UnknownElementError;

/**
 * Type checker for BotElementError
 */
export const isBotElementError = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & BotElementError => obj?.$kind === BotElementDiagnosticKind.IncorrectTypeError || obj?.$kind === BotElementDiagnosticKind.ExpressionError || obj?.$kind === BotElementDiagnosticKind.InvalidVariableType || obj?.$kind === BotElementDiagnosticKind.PropertyError || obj?.$kind === BotElementDiagnosticKind.ListPropertyItemError || obj?.$kind === BotElementDiagnosticKind.DictionaryPropertyItemError || obj?.$kind === BotElementDiagnosticKind.InvalidReferenceError || obj?.$kind === BotElementDiagnosticKind.BindingKeyNotFoundError || obj?.$kind === BotElementDiagnosticKind.BindingIncorrectTypeError || obj?.$kind === BotElementDiagnosticKind.ReadOnlyVariableMutationError || obj?.$kind === BotElementDiagnosticKind.UnknownElementError;


/**
 * Type checker for PropertyErrorBase
 */
export const isPropertyErrorBase = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & PropertyErrorBase => obj?.$kind === BotElementDiagnosticKind.PropertyError || obj?.$kind === BotElementDiagnosticKind.ListPropertyItemError || obj?.$kind === BotElementDiagnosticKind.DictionaryPropertyItemError;

/**
 * Type checker for IncorrectTypeError
 */
export const isIncorrectTypeError = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & IncorrectTypeError => obj?.$kind === BotElementDiagnosticKind.IncorrectTypeError;

/**
 * Type checker for ExpressionError
 */
export const isExpressionError = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & ExpressionError => obj?.$kind === BotElementDiagnosticKind.ExpressionError;

/**
 * Type checker for InvalidVariableType
 */
export const isInvalidVariableType = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & InvalidVariableType => obj?.$kind === BotElementDiagnosticKind.InvalidVariableType;

/**
 * Type checker for PropertyError
 */
export const isPropertyError = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & PropertyError => obj?.$kind === BotElementDiagnosticKind.PropertyError;

/**
 * Type checker for ListPropertyItemError
 */
export const isListPropertyItemError = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & ListPropertyItemError => obj?.$kind === BotElementDiagnosticKind.ListPropertyItemError;

/**
 * Type checker for DictionaryPropertyItemError
 */
export const isDictionaryPropertyItemError = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & DictionaryPropertyItemError => obj?.$kind === BotElementDiagnosticKind.DictionaryPropertyItemError;

/**
 * Type checker for InvalidReferenceError
 */
export const isInvalidReferenceError = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & InvalidReferenceError => obj?.$kind === BotElementDiagnosticKind.InvalidReferenceError;

/**
 * Type checker for BindingError
 */
export const isBindingError = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & BindingError => obj?.$kind === BotElementDiagnosticKind.BindingKeyNotFoundError || obj?.$kind === BotElementDiagnosticKind.BindingIncorrectTypeError;

/**
 * Type checker for BindingKeyNotFoundError
 */
export const isBindingKeyNotFoundError = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & BindingKeyNotFoundError => obj?.$kind === BotElementDiagnosticKind.BindingKeyNotFoundError;

/**
 * Type checker for BindingIncorrectTypeError
 */
export const isBindingIncorrectTypeError = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & BindingIncorrectTypeError => obj?.$kind === BotElementDiagnosticKind.BindingIncorrectTypeError;

/**
 * Type checker for ReadOnlyVariableMutationError
 */
export const isReadOnlyVariableMutationError = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & ReadOnlyVariableMutationError => obj?.$kind === BotElementDiagnosticKind.ReadOnlyVariableMutationError;

/**
 * Type checker for UnknownElementError
 */
export const isUnknownElementError = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & UnknownElementError => obj?.$kind === BotElementDiagnosticKind.UnknownElementError;

/**
 * Type checker for BotElementSuggestion
 */
export const isBotElementSuggestion = <T extends BotElementSuggestion>(
 obj?: T | null
): obj is T & BotElementSuggestion => obj?.$kind === BotElementSuggestionKind.ChangeDialogContractSuggestion;

/**
 * Type checker for ChangeDialogContractSuggestion
 */
export const isChangeDialogContractSuggestion = <T extends BotElementSuggestion>(
 obj?: T | null
): obj is T & ChangeDialogContractSuggestion => obj?.$kind === BotElementSuggestionKind.ChangeDialogContractSuggestion;

/**
 * Type checker for VariableInformationDiagnostic
 */
export const isVariableInformationDiagnostic = <T extends BotElementDiagnostic>(
 obj?: T | null
): obj is T & VariableInformationDiagnostic => obj?.$kind === BotElementDiagnosticKind.VariableInformationDiagnostic;

/**
 * Type checker for BooleanConditionBase
 */
export const isBooleanConditionBase = <T extends BotElement>(
 obj?: T | null
): obj is T & BooleanConditionBase => obj?.$kind === BotElementKind.AndConditionGroup || obj?.$kind === BotElementKind.OrConditionGroup || obj?.$kind === BotElementKind.BooleanCondition;

/**
 * Type checker for BooleanConditionGroup
 */
export const isBooleanConditionGroup = <T extends BotElement>(
 obj?: T | null
): obj is T & BooleanConditionGroup => obj?.$kind === BotElementKind.AndConditionGroup || obj?.$kind === BotElementKind.OrConditionGroup;

/**
 * Type checker for AndConditionGroup
 */
export const isAndConditionGroup = <T extends BotElement>(
 obj?: T | null
): obj is T & AndConditionGroup => obj?.$kind === BotElementKind.AndConditionGroup;

/**
 * Type checker for OrConditionGroup
 */
export const isOrConditionGroup = <T extends BotElement>(
 obj?: T | null
): obj is T & OrConditionGroup => obj?.$kind === BotElementKind.OrConditionGroup;

/**
 * Type checker for BooleanCondition
 */
export const isBooleanCondition = <T extends BotElement>(
 obj?: T | null
): obj is T & BooleanCondition => obj?.$kind === BotElementKind.BooleanCondition;

/**
 * Type checker for WasmCommand
 */
export const isWasmCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & WasmCommand => obj?.$kind === WasmCommandKind.CancelCommand || obj?.$kind === WasmCommandKind.ConvertFileFormatCommand || obj?.$kind === WasmCommandKind.PowerFxLanguageServerCommand || obj?.$kind === WasmCommandKind.LoadBotCommand || obj?.$kind === WasmCommandKind.GetVariableReferencesCommand || obj?.$kind === WasmCommandKind.GetVariablesCommand || obj?.$kind === WasmCommandKind.LoadBotChangesCommand || obj?.$kind === WasmCommandKind.ValidateBotCommand || obj?.$kind === WasmCommandKind.GetComponentCommand || obj?.$kind === WasmCommandKind.UpdateVariableCommand || obj?.$kind === WasmCommandKind.GetSerializedContentCommand || obj?.$kind === WasmCommandKind.GetSerializedElementsCommand || obj?.$kind === WasmCommandKind.ParseElementsCommand || obj?.$kind === WasmCommandKind.ApplyBotElementSuggestionCommand || obj?.$kind === WasmCommandKind.ExtractTransferStateCommand || obj?.$kind === WasmCommandKind.ApplyTransferStateCommand;

/**
 * Type checker for CancelCommand
 */
export const isCancelCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & CancelCommand => obj?.$kind === WasmCommandKind.CancelCommand;

/**
 * Type checker for ConvertFileFormatCommand
 */
export const isConvertFileFormatCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & ConvertFileFormatCommand => obj?.$kind === WasmCommandKind.ConvertFileFormatCommand;

/**
 * Type checker for PowerFxLanguageServerCommand
 */
export const isPowerFxLanguageServerCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & PowerFxLanguageServerCommand => obj?.$kind === WasmCommandKind.PowerFxLanguageServerCommand;

/**
 * Type checker for LoadBotCommand
 */
export const isLoadBotCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & LoadBotCommand => obj?.$kind === WasmCommandKind.LoadBotCommand;

/**
 * Type checker for GetVariableReferencesCommand
 */
export const isGetVariableReferencesCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & GetVariableReferencesCommand => obj?.$kind === WasmCommandKind.GetVariableReferencesCommand;

/**
 * Type checker for GetVariablesCommand
 */
export const isGetVariablesCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & GetVariablesCommand => obj?.$kind === WasmCommandKind.GetVariablesCommand;

/**
 * Type checker for LoadBotChangesCommand
 */
export const isLoadBotChangesCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & LoadBotChangesCommand => obj?.$kind === WasmCommandKind.LoadBotChangesCommand;

/**
 * Type checker for ValidateBotCommand
 */
export const isValidateBotCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & ValidateBotCommand => obj?.$kind === WasmCommandKind.ValidateBotCommand;

/**
 * Type checker for GetComponentCommand
 */
export const isGetComponentCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & GetComponentCommand => obj?.$kind === WasmCommandKind.GetComponentCommand;

/**
 * Type checker for UpdateVariableCommand
 */
export const isUpdateVariableCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & UpdateVariableCommand => obj?.$kind === WasmCommandKind.UpdateVariableCommand;

/**
 * Type checker for GetSerializedContentCommand
 */
export const isGetSerializedContentCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & GetSerializedContentCommand => obj?.$kind === WasmCommandKind.GetSerializedContentCommand;

/**
 * Type checker for GetSerializedElementsCommand
 */
export const isGetSerializedElementsCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & GetSerializedElementsCommand => obj?.$kind === WasmCommandKind.GetSerializedElementsCommand;

/**
 * Type checker for ParseElementsCommand
 */
export const isParseElementsCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & ParseElementsCommand => obj?.$kind === WasmCommandKind.ParseElementsCommand;

/**
 * Type checker for ApplyBotElementSuggestionCommand
 */
export const isApplyBotElementSuggestionCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & ApplyBotElementSuggestionCommand => obj?.$kind === WasmCommandKind.ApplyBotElementSuggestionCommand;

/**
 * Type checker for WasmCommandResponse
 */
export const isWasmCommandResponse = <T extends WasmCommandResponse>(
 obj?: T | null
): obj is T & WasmCommandResponse => obj?.$kind === WasmCommandResponseKind.LoadBotCommandResponse || obj?.$kind === WasmCommandResponseKind.ApplyBotElementSuggestionCommandResponse || obj?.$kind === WasmCommandResponseKind.ErrorCommandResponse || obj?.$kind === WasmCommandResponseKind.GetVariableReferencesCommandResponse || obj?.$kind === WasmCommandResponseKind.GetVariablesCommandResponse || obj?.$kind === WasmCommandResponseKind.ValidateBotCommandResponse || obj?.$kind === WasmCommandResponseKind.GetComponentCommandResponse || obj?.$kind === WasmCommandResponseKind.GetSerializedElementsCommandResponse || obj?.$kind === WasmCommandResponseKind.ParseElementsCommandResponse || obj?.$kind === WasmCommandResponseKind.PowerFxLanguageServerCommandResponse || obj?.$kind === WasmCommandResponseKind.ConvertFileFormatCommandResponse || obj?.$kind === WasmCommandResponseKind.UpdateVariableCommandResponse || obj?.$kind === WasmCommandResponseKind.ExtractTransferStateCommandResponse || obj?.$kind === WasmCommandResponseKind.ApplyTransferStateCommandResponse || obj?.$kind === WasmCommandResponseKind.GetSerializedContentCommandResponse;

/**
 * Type checker for LoadBotCommandResponse
 */
export const isLoadBotCommandResponse = <T extends WasmCommandResponse>(
 obj?: T | null
): obj is T & LoadBotCommandResponse => obj?.$kind === WasmCommandResponseKind.LoadBotCommandResponse;

/**
 * Type checker for ApplyBotElementSuggestionCommandResponse
 */
export const isApplyBotElementSuggestionCommandResponse = <T extends WasmCommandResponse>(
 obj?: T | null
): obj is T & ApplyBotElementSuggestionCommandResponse => obj?.$kind === WasmCommandResponseKind.ApplyBotElementSuggestionCommandResponse;

/**
 * Type checker for ErrorCommandResponse
 */
export const isErrorCommandResponse = <T extends WasmCommandResponse>(
 obj?: T | null
): obj is T & ErrorCommandResponse => obj?.$kind === WasmCommandResponseKind.ErrorCommandResponse;

/**
 * Type checker for GetVariableReferencesCommandResponse
 */
export const isGetVariableReferencesCommandResponse = <T extends WasmCommandResponse>(
 obj?: T | null
): obj is T & GetVariableReferencesCommandResponse => obj?.$kind === WasmCommandResponseKind.GetVariableReferencesCommandResponse;

/**
 * Type checker for GetVariablesCommandResponse
 */
export const isGetVariablesCommandResponse = <T extends WasmCommandResponse>(
 obj?: T | null
): obj is T & GetVariablesCommandResponse => obj?.$kind === WasmCommandResponseKind.GetVariablesCommandResponse;

/**
 * Type checker for ValidateBotCommandResponse
 */
export const isValidateBotCommandResponse = <T extends WasmCommandResponse>(
 obj?: T | null
): obj is T & ValidateBotCommandResponse => obj?.$kind === WasmCommandResponseKind.ValidateBotCommandResponse;

/**
 * Type checker for GetComponentCommandResponse
 */
export const isGetComponentCommandResponse = <T extends WasmCommandResponse>(
 obj?: T | null
): obj is T & GetComponentCommandResponse => obj?.$kind === WasmCommandResponseKind.GetComponentCommandResponse;

/**
 * Type checker for GetSerializedElementsCommandResponse
 */
export const isGetSerializedElementsCommandResponse = <T extends WasmCommandResponse>(
 obj?: T | null
): obj is T & GetSerializedElementsCommandResponse => obj?.$kind === WasmCommandResponseKind.GetSerializedElementsCommandResponse;

/**
 * Type checker for ParseElementsCommandResponse
 */
export const isParseElementsCommandResponse = <T extends WasmCommandResponse>(
 obj?: T | null
): obj is T & ParseElementsCommandResponse => obj?.$kind === WasmCommandResponseKind.ParseElementsCommandResponse;

/**
 * Type checker for PowerFxLanguageServerCommandResponse
 */
export const isPowerFxLanguageServerCommandResponse = <T extends WasmCommandResponse>(
 obj?: T | null
): obj is T & PowerFxLanguageServerCommandResponse => obj?.$kind === WasmCommandResponseKind.PowerFxLanguageServerCommandResponse;

/**
 * Type checker for ConvertFileFormatCommandResponse
 */
export const isConvertFileFormatCommandResponse = <T extends WasmCommandResponse>(
 obj?: T | null
): obj is T & ConvertFileFormatCommandResponse => obj?.$kind === WasmCommandResponseKind.ConvertFileFormatCommandResponse;

/**
 * Type checker for UpdateVariableCommandResponse
 */
export const isUpdateVariableCommandResponse = <T extends WasmCommandResponse>(
 obj?: T | null
): obj is T & UpdateVariableCommandResponse => obj?.$kind === WasmCommandResponseKind.UpdateVariableCommandResponse;

/**
 * Type checker for ExtractTransferStateCommand
 */
export const isExtractTransferStateCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & ExtractTransferStateCommand => obj?.$kind === WasmCommandKind.ExtractTransferStateCommand;

/**
 * Type checker for ApplyTransferStateCommand
 */
export const isApplyTransferStateCommand = <T extends WasmCommand>(
 obj?: T | null
): obj is T & ApplyTransferStateCommand => obj?.$kind === WasmCommandKind.ApplyTransferStateCommand;

/**
 * Type checker for ExtractTransferStateCommandResponse
 */
export const isExtractTransferStateCommandResponse = <T extends WasmCommandResponse>(
 obj?: T | null
): obj is T & ExtractTransferStateCommandResponse => obj?.$kind === WasmCommandResponseKind.ExtractTransferStateCommandResponse;

/**
 * Type checker for ApplyTransferStateCommandResponse
 */
export const isApplyTransferStateCommandResponse = <T extends WasmCommandResponse>(
 obj?: T | null
): obj is T & ApplyTransferStateCommandResponse => obj?.$kind === WasmCommandResponseKind.ApplyTransferStateCommandResponse;

/**
 * Type checker for GetSerializedContentCommandResponse
 */
export const isGetSerializedContentCommandResponse = <T extends WasmCommandResponse>(
 obj?: T | null
): obj is T & GetSerializedContentCommandResponse => obj?.$kind === WasmCommandResponseKind.GetSerializedContentCommandResponse;

/**
 * Type checker for WasmLog
 */
export const isWasmLog = <T extends WasmLog>(
 obj?: T | null
): obj is T & WasmLog => obj?.$kind === WasmLogKind.WasmBrowserActivityLog || obj?.$kind === WasmLogKind.WasmBrowserTelemetryLog;

/**
 * Type checker for WasmBrowserActivityLog
 */
export const isWasmBrowserActivityLog = <T extends WasmLog>(
 obj?: T | null
): obj is T & WasmBrowserActivityLog => obj?.$kind === WasmLogKind.WasmBrowserActivityLog;

/**
 * Type checker for WasmBrowserTelemetryLog
 */
export const isWasmBrowserTelemetryLog = <T extends WasmLog>(
 obj?: T | null
): obj is T & WasmBrowserTelemetryLog => obj?.$kind === WasmLogKind.WasmBrowserTelemetryLog;

/**
 * Type checker for ValueExpression
 */
export const isValueExpression = <T extends BotElement>(
 obj?: T | null
): obj is T & ValueExpression => obj?.$kind === BotElementKind.ValueExpression;

/**
 * Type checker for BoolExpression
 */
export const isBoolExpression = <T extends BotElement>(
 obj?: T | null
): obj is T & BoolExpression => obj?.$kind === BotElementKind.BoolExpression;

/**
 * Type checker for NumberExpression
 */
export const isNumberExpression = <T extends BotElement>(
 obj?: T | null
): obj is T & NumberExpression => obj?.$kind === BotElementKind.NumberExpression;

/**
 * Type checker for IntExpression
 */
export const isIntExpression = <T extends BotElement>(
 obj?: T | null
): obj is T & IntExpression => obj?.$kind === BotElementKind.IntExpression;

/**
 * Type checker for StringExpression
 */
export const isStringExpression = <T extends BotElement>(
 obj?: T | null
): obj is T & StringExpression => obj?.$kind === BotElementKind.StringExpression;

/**
 * Type checker for DialogExpression
 */
export const isDialogExpression = <T extends BotElement>(
 obj?: T | null
): obj is T & DialogExpression => obj?.$kind === BotElementKind.DialogExpression;

export const isSystemVariable = (obj: VariableInformationDiagnostic) => obj.scope == null;
