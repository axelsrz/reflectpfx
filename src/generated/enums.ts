/**
 * <auto-generated />
 */

export enum StateCode
{
    Active = 'Active',
    Inactive = 'Inactive',
}

/**
 * Helper functions around the `StateCode` enum.
 */
export const StateCodeHelpers = 
{
    /**
     * Gets the lookup key for the title of a `StateCode` value
     */
    getTitleKey: (stateCode: StateCode): string => {
        switch (stateCode) {
            case StateCode.Active:
                return '$$enum_StateCode_Active_title$$';
            case StateCode.Inactive:
                return '$$enum_StateCode_Inactive_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `StateCode` value
     */
    getDescriptionKey: (stateCode: StateCode): string => {
        switch (stateCode) {
            case StateCode.Active:
                return '$$enum_StateCode_Active_description$$';
            case StateCode.Inactive:
                return '$$enum_StateCode_Inactive_description$$';
        }
    }
}

export enum ProvisioningStatus
{
    Provisioned = 1,
    Deprovisioned = 2,
    Provisioning = 3,
    ProvisionFailed = 4,
    MissingLicense = 5,
}

/**
 * Helper functions around the `ProvisioningStatus` enum.
 */
export const ProvisioningStatusHelpers = 
{
    /**
     * Gets the lookup key for the title of a `ProvisioningStatus` value
     */
    getTitleKey: (provisioningStatus: ProvisioningStatus): string => {
        switch (provisioningStatus) {
            case ProvisioningStatus.Provisioned:
                return '$$enum_ProvisioningStatus_Provisioned_title$$';
            case ProvisioningStatus.Deprovisioned:
                return '$$enum_ProvisioningStatus_Deprovisioned_title$$';
            case ProvisioningStatus.Provisioning:
                return '$$enum_ProvisioningStatus_Provisioning_title$$';
            case ProvisioningStatus.ProvisionFailed:
                return '$$enum_ProvisioningStatus_ProvisionFailed_title$$';
            case ProvisioningStatus.MissingLicense:
                return '$$enum_ProvisioningStatus_MissingLicense_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `ProvisioningStatus` value
     */
    getDescriptionKey: (provisioningStatus: ProvisioningStatus): string => {
        switch (provisioningStatus) {
            case ProvisioningStatus.Provisioned:
                return '$$enum_ProvisioningStatus_Provisioned_description$$';
            case ProvisioningStatus.Deprovisioned:
                return '$$enum_ProvisioningStatus_Deprovisioned_description$$';
            case ProvisioningStatus.Provisioning:
                return '$$enum_ProvisioningStatus_Provisioning_description$$';
            case ProvisioningStatus.ProvisionFailed:
                return '$$enum_ProvisioningStatus_ProvisionFailed_description$$';
            case ProvisioningStatus.MissingLicense:
                return '$$enum_ProvisioningStatus_MissingLicense_description$$';
        }
    }
}

export enum VariableScope
{
    Dialog = 'Dialog',
    Conversation = 'Conversation',
    User = 'User',
}

/**
 * Helper functions around the `VariableScope` enum.
 */
export const VariableScopeHelpers = 
{
    /**
     * Gets the lookup key for the title of a `VariableScope` value
     */
    getTitleKey: (variableScope: VariableScope): string => {
        switch (variableScope) {
            case VariableScope.Dialog:
                return '$$enum_VariableScope_Dialog_title$$';
            case VariableScope.Conversation:
                return '$$enum_VariableScope_Conversation_title$$';
            case VariableScope.User:
                return '$$enum_VariableScope_User_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `VariableScope` value
     */
    getDescriptionKey: (variableScope: VariableScope): string => {
        switch (variableScope) {
            case VariableScope.Dialog:
                return '$$enum_VariableScope_Dialog_description$$';
            case VariableScope.Conversation:
                return '$$enum_VariableScope_Conversation_description$$';
            case VariableScope.User:
                return '$$enum_VariableScope_User_description$$';
        }
    }
}

export enum ConversationOutcome
{
    /**
     * If the dialog action is reached then the current session is considered resolved for the purpose of analytics. The session ends immediately for the purpose of analytics.
     */
    ResolvedConfirmed = 'ResolvedConfirmed',
    /**
     * If the dialog action is reached and user didn't reply then we consider that the current session is in assumed resolved for the purpose of analytics.
     */
    ResolvedImplied = 'ResolvedImplied',
    /**
     * If the dialog action is reached then the current session is considered escalated for the purpose of analytics.
     */
    Escalated = 'Escalated',
}

/**
 * Helper functions around the `ConversationOutcome` enum.
 */
export const ConversationOutcomeHelpers = 
{
    /**
     * Gets the lookup key for the title of a `ConversationOutcome` value
     */
    getTitleKey: (conversationOutcome: ConversationOutcome): string => {
        switch (conversationOutcome) {
            case ConversationOutcome.ResolvedConfirmed:
                return '$$enum_ConversationOutcome_ResolvedConfirmed_title$$';
            case ConversationOutcome.ResolvedImplied:
                return '$$enum_ConversationOutcome_ResolvedImplied_title$$';
            case ConversationOutcome.Escalated:
                return '$$enum_ConversationOutcome_Escalated_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `ConversationOutcome` value
     */
    getDescriptionKey: (conversationOutcome: ConversationOutcome): string => {
        switch (conversationOutcome) {
            case ConversationOutcome.ResolvedConfirmed:
                return '$$enum_ConversationOutcome_ResolvedConfirmed_description$$';
            case ConversationOutcome.ResolvedImplied:
                return '$$enum_ConversationOutcome_ResolvedImplied_description$$';
            case ConversationOutcome.Escalated:
                return '$$enum_ConversationOutcome_Escalated_description$$';
        }
    }
}

/**
 * Controls the way that choices for a `ChoicePrompt` or yes/no options for a `ConfirmPrompt` are presented to a user.
 */
export enum ListStyle
{
    /**
     * Don't include any choices for prompt.
     */
    None = 'None',
    /**
     * Automatically select the appropriate style for the current channel.
     */
    Auto = 'Auto',
    /**
     * Add choices to prompt as an inline list.
     */
    Inline = 'Inline',
    /**
     * Add choices to prompt as a numbered list.
     */
    List = 'List',
    /**
     * Add choices to prompt as suggested actions.
     */
    SuggestedAction = 'SuggestedAction',
    /**
     * Add choices to prompt as a HeroCard with buttons.
     */
    HeroCard = 'HeroCard',
}

/**
 * Helper functions around the `ListStyle` enum.
 */
export const ListStyleHelpers = 
{
    /**
     * Gets the lookup key for the title of a `ListStyle` value
     */
    getTitleKey: (listStyle: ListStyle): string => {
        switch (listStyle) {
            case ListStyle.None:
                return '$$enum_ListStyle_None_title$$';
            case ListStyle.Auto:
                return '$$enum_ListStyle_Auto_title$$';
            case ListStyle.Inline:
                return '$$enum_ListStyle_Inline_title$$';
            case ListStyle.List:
                return '$$enum_ListStyle_List_title$$';
            case ListStyle.SuggestedAction:
                return '$$enum_ListStyle_SuggestedAction_title$$';
            case ListStyle.HeroCard:
                return '$$enum_ListStyle_HeroCard_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `ListStyle` value
     */
    getDescriptionKey: (listStyle: ListStyle): string => {
        switch (listStyle) {
            case ListStyle.None:
                return '$$enum_ListStyle_None_description$$';
            case ListStyle.Auto:
                return '$$enum_ListStyle_Auto_description$$';
            case ListStyle.Inline:
                return '$$enum_ListStyle_Inline_description$$';
            case ListStyle.List:
                return '$$enum_ListStyle_List_description$$';
            case ListStyle.SuggestedAction:
                return '$$enum_ListStyle_SuggestedAction_description$$';
            case ListStyle.HeroCard:
                return '$$enum_ListStyle_HeroCard_description$$';
        }
    }
}

export enum VariablesToClear
{
    ConversationScopedVariables = 'ConversationScopedVariables',
    UserScopedVariables = 'UserScopedVariables',
    AllGlobalVariables = 'AllGlobalVariables',
}

/**
 * Helper functions around the `VariablesToClear` enum.
 */
export const VariablesToClearHelpers = 
{
    /**
     * Gets the lookup key for the title of a `VariablesToClear` value
     */
    getTitleKey: (variablesToClear: VariablesToClear): string => {
        switch (variablesToClear) {
            case VariablesToClear.ConversationScopedVariables:
                return '$$enum_VariablesToClear_ConversationScopedVariables_title$$';
            case VariablesToClear.UserScopedVariables:
                return '$$enum_VariablesToClear_UserScopedVariables_title$$';
            case VariablesToClear.AllGlobalVariables:
                return '$$enum_VariablesToClear_AllGlobalVariables_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `VariablesToClear` value
     */
    getDescriptionKey: (variablesToClear: VariablesToClear): string => {
        switch (variablesToClear) {
            case VariablesToClear.ConversationScopedVariables:
                return '$$enum_VariablesToClear_ConversationScopedVariables_description$$';
            case VariablesToClear.UserScopedVariables:
                return '$$enum_VariablesToClear_UserScopedVariables_description$$';
            case VariablesToClear.AllGlobalVariables:
                return '$$enum_VariablesToClear_AllGlobalVariables_description$$';
        }
    }
}

export enum ArrayChangeType
{
    /**
     * Push item onto the end of the array
     */
    Push = 'Push',
    /**
     * Pop the item off the end of the array
     */
    Pop = 'Pop',
    /**
     * Take an item from the front of the array
     */
    Take = 'Take',
    /**
     * Remove the item from the array, regardless of it's location
     */
    Remove = 'Remove',
    /**
     * Clear the contents of the array
     */
    Clear = 'Clear',
}

/**
 * Helper functions around the `ArrayChangeType` enum.
 */
export const ArrayChangeTypeHelpers = 
{
    /**
     * Gets the lookup key for the title of a `ArrayChangeType` value
     */
    getTitleKey: (arrayChangeType: ArrayChangeType): string => {
        switch (arrayChangeType) {
            case ArrayChangeType.Push:
                return '$$enum_ArrayChangeType_Push_title$$';
            case ArrayChangeType.Pop:
                return '$$enum_ArrayChangeType_Pop_title$$';
            case ArrayChangeType.Take:
                return '$$enum_ArrayChangeType_Take_title$$';
            case ArrayChangeType.Remove:
                return '$$enum_ArrayChangeType_Remove_title$$';
            case ArrayChangeType.Clear:
                return '$$enum_ArrayChangeType_Clear_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `ArrayChangeType` value
     */
    getDescriptionKey: (arrayChangeType: ArrayChangeType): string => {
        switch (arrayChangeType) {
            case ArrayChangeType.Push:
                return '$$enum_ArrayChangeType_Push_description$$';
            case ArrayChangeType.Pop:
                return '$$enum_ArrayChangeType_Pop_description$$';
            case ArrayChangeType.Take:
                return '$$enum_ArrayChangeType_Take_description$$';
            case ArrayChangeType.Remove:
                return '$$enum_ArrayChangeType_Remove_description$$';
            case ArrayChangeType.Clear:
                return '$$enum_ArrayChangeType_Clear_description$$';
        }
    }
}

export enum ResponseTypes
{
    /**
     * No response expected
     */
    None = 'None',
    /**
     * Plain JSON response
     */
    Json = 'Json',
    /**
     * JSON Activity object to send to the user
     */
    Activity = 'Activity',
    /**
     * Json Array of activity objects to send to the user
     */
    Activities = 'Activities',
    /**
     * Binary data parsing from http response content
     */
    Binary = 'Binary',
}

/**
 * Helper functions around the `ResponseTypes` enum.
 */
export const ResponseTypesHelpers = 
{
    /**
     * Gets the lookup key for the title of a `ResponseTypes` value
     */
    getTitleKey: (responseTypes: ResponseTypes): string => {
        switch (responseTypes) {
            case ResponseTypes.None:
                return '$$enum_ResponseTypes_None_title$$';
            case ResponseTypes.Json:
                return '$$enum_ResponseTypes_Json_title$$';
            case ResponseTypes.Activity:
                return '$$enum_ResponseTypes_Activity_title$$';
            case ResponseTypes.Activities:
                return '$$enum_ResponseTypes_Activities_title$$';
            case ResponseTypes.Binary:
                return '$$enum_ResponseTypes_Binary_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `ResponseTypes` value
     */
    getDescriptionKey: (responseTypes: ResponseTypes): string => {
        switch (responseTypes) {
            case ResponseTypes.None:
                return '$$enum_ResponseTypes_None_description$$';
            case ResponseTypes.Json:
                return '$$enum_ResponseTypes_Json_description$$';
            case ResponseTypes.Activity:
                return '$$enum_ResponseTypes_Activity_description$$';
            case ResponseTypes.Activities:
                return '$$enum_ResponseTypes_Activities_description$$';
            case ResponseTypes.Binary:
                return '$$enum_ResponseTypes_Binary_description$$';
        }
    }
}

export enum HttpMethod
{
    GET = 'GET',
    POST = 'POST',
    PATCH = 'PATCH',
    PUT = 'PUT',
    DELETE = 'DELETE',
}

/**
 * Helper functions around the `HttpMethod` enum.
 */
export const HttpMethodHelpers = 
{
    /**
     * Gets the lookup key for the title of a `HttpMethod` value
     */
    getTitleKey: (httpMethod: HttpMethod): string => {
        switch (httpMethod) {
            case HttpMethod.GET:
                return '$$enum_HttpMethod_GET_title$$';
            case HttpMethod.POST:
                return '$$enum_HttpMethod_POST_title$$';
            case HttpMethod.PATCH:
                return '$$enum_HttpMethod_PATCH_title$$';
            case HttpMethod.PUT:
                return '$$enum_HttpMethod_PUT_title$$';
            case HttpMethod.DELETE:
                return '$$enum_HttpMethod_DELETE_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `HttpMethod` value
     */
    getDescriptionKey: (httpMethod: HttpMethod): string => {
        switch (httpMethod) {
            case HttpMethod.GET:
                return '$$enum_HttpMethod_GET_description$$';
            case HttpMethod.POST:
                return '$$enum_HttpMethod_POST_description$$';
            case HttpMethod.PATCH:
                return '$$enum_HttpMethod_PATCH_description$$';
            case HttpMethod.PUT:
                return '$$enum_HttpMethod_PUT_description$$';
            case HttpMethod.DELETE:
                return '$$enum_HttpMethod_DELETE_description$$';
        }
    }
}

export enum HandoffVariablesList
{
    /**
     * Include only topic user variables
     */
    TopicVariables = 'TopicVariables',
    /**
     * Include only global user variables
     */
    GlobalVariables = 'GlobalVariables',
    /**
     * Include all user variables
     */
    AllVariables = 'AllVariables',
}

/**
 * Helper functions around the `HandoffVariablesList` enum.
 */
export const HandoffVariablesListHelpers = 
{
    /**
     * Gets the lookup key for the title of a `HandoffVariablesList` value
     */
    getTitleKey: (handoffVariablesList: HandoffVariablesList): string => {
        switch (handoffVariablesList) {
            case HandoffVariablesList.TopicVariables:
                return '$$enum_HandoffVariablesList_TopicVariables_title$$';
            case HandoffVariablesList.GlobalVariables:
                return '$$enum_HandoffVariablesList_GlobalVariables_title$$';
            case HandoffVariablesList.AllVariables:
                return '$$enum_HandoffVariablesList_AllVariables_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `HandoffVariablesList` value
     */
    getDescriptionKey: (handoffVariablesList: HandoffVariablesList): string => {
        switch (handoffVariablesList) {
            case HandoffVariablesList.TopicVariables:
                return '$$enum_HandoffVariablesList_TopicVariables_description$$';
            case HandoffVariablesList.GlobalVariables:
                return '$$enum_HandoffVariablesList_GlobalVariables_description$$';
            case HandoffVariablesList.AllVariables:
                return '$$enum_HandoffVariablesList_AllVariables_description$$';
        }
    }
}

export enum ActionType
{
    /**
     * Represents a text response to be sent via the chat system.
     */
    messageBack = 'messageBack',
    /**
     * Opens a URL in the built-in browser.
     */
    openUrl = 'openUrl',
    /**
     * Initiates an OAuth sign-in process.
     */
    signin = 'signin',
    /**
     * Displays an image.
     */
    showImage = 'showImage',
    /**
     * Downloads a file.
     */
    downloadFile = 'downloadFile',
    /**
     * Plays audio.
     */
    playAudio = 'playAudio',
    /**
     * Plays a video.
     */
    playVideo = 'playVideo',
    /**
     * Initiates a phone call.
     */
    call = 'call',
    /**
     * Sends a message to the bot, and posts a visible response in the chat.
     */
    imBack = 'imBack',
    /**
     * Sends a message to the bot, and may not post a visible response in the chat.
     */
    postBack = 'postBack',
}

/**
 * Helper functions around the `ActionType` enum.
 */
export const ActionTypeHelpers = 
{
    /**
     * Gets the lookup key for the title of a `ActionType` value
     */
    getTitleKey: (actionType: ActionType): string => {
        switch (actionType) {
            case ActionType.messageBack:
                return '$$enum_ActionType_messageBack_title$$';
            case ActionType.openUrl:
                return '$$enum_ActionType_openUrl_title$$';
            case ActionType.signin:
                return '$$enum_ActionType_signin_title$$';
            case ActionType.showImage:
                return '$$enum_ActionType_showImage_title$$';
            case ActionType.downloadFile:
                return '$$enum_ActionType_downloadFile_title$$';
            case ActionType.playAudio:
                return '$$enum_ActionType_playAudio_title$$';
            case ActionType.playVideo:
                return '$$enum_ActionType_playVideo_title$$';
            case ActionType.call:
                return '$$enum_ActionType_call_title$$';
            case ActionType.imBack:
                return '$$enum_ActionType_imBack_title$$';
            case ActionType.postBack:
                return '$$enum_ActionType_postBack_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `ActionType` value
     */
    getDescriptionKey: (actionType: ActionType): string => {
        switch (actionType) {
            case ActionType.messageBack:
                return '$$enum_ActionType_messageBack_description$$';
            case ActionType.openUrl:
                return '$$enum_ActionType_openUrl_description$$';
            case ActionType.signin:
                return '$$enum_ActionType_signin_description$$';
            case ActionType.showImage:
                return '$$enum_ActionType_showImage_description$$';
            case ActionType.downloadFile:
                return '$$enum_ActionType_downloadFile_description$$';
            case ActionType.playAudio:
                return '$$enum_ActionType_playAudio_description$$';
            case ActionType.playVideo:
                return '$$enum_ActionType_playVideo_description$$';
            case ActionType.call:
                return '$$enum_ActionType_call_description$$';
            case ActionType.imBack:
                return '$$enum_ActionType_imBack_description$$';
            case ActionType.postBack:
                return '$$enum_ActionType_postBack_description$$';
        }
    }
}

export enum PublishResult
{
    Succeeded = 'Succeeded',
    Failed = 'Failed',
}

/**
 * Helper functions around the `PublishResult` enum.
 */
export const PublishResultHelpers = 
{
    /**
     * Gets the lookup key for the title of a `PublishResult` value
     */
    getTitleKey: (publishResult: PublishResult): string => {
        switch (publishResult) {
            case PublishResult.Succeeded:
                return '$$enum_PublishResult_Succeeded_title$$';
            case PublishResult.Failed:
                return '$$enum_PublishResult_Failed_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `PublishResult` value
     */
    getDescriptionKey: (publishResult: PublishResult): string => {
        switch (publishResult) {
            case PublishResult.Succeeded:
                return '$$enum_PublishResult_Succeeded_description$$';
            case PublishResult.Failed:
                return '$$enum_PublishResult_Failed_description$$';
        }
    }
}

export enum BotAccessControlPolicy
{
    /**
     * Anyone can talk with the bot
     */
    Any = 'Any',
    /**
     * Anyone who has Read access to the bot entity can talk with the bot
     */
    ChatbotReaders = 'ChatbotReaders',
    /**
     * Anyone who is a member of one of the provided security groups can talk with the bot
     */
    GroupMembership = 'GroupMembership',
}

/**
 * Helper functions around the `BotAccessControlPolicy` enum.
 */
export const BotAccessControlPolicyHelpers = 
{
    /**
     * Gets the lookup key for the title of a `BotAccessControlPolicy` value
     */
    getTitleKey: (botAccessControlPolicy: BotAccessControlPolicy): string => {
        switch (botAccessControlPolicy) {
            case BotAccessControlPolicy.Any:
                return '$$enum_BotAccessControlPolicy_Any_title$$';
            case BotAccessControlPolicy.ChatbotReaders:
                return '$$enum_BotAccessControlPolicy_ChatbotReaders_title$$';
            case BotAccessControlPolicy.GroupMembership:
                return '$$enum_BotAccessControlPolicy_GroupMembership_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `BotAccessControlPolicy` value
     */
    getDescriptionKey: (botAccessControlPolicy: BotAccessControlPolicy): string => {
        switch (botAccessControlPolicy) {
            case BotAccessControlPolicy.Any:
                return '$$enum_BotAccessControlPolicy_Any_description$$';
            case BotAccessControlPolicy.ChatbotReaders:
                return '$$enum_BotAccessControlPolicy_ChatbotReaders_description$$';
            case BotAccessControlPolicy.GroupMembership:
                return '$$enum_BotAccessControlPolicy_GroupMembership_description$$';
        }
    }
}

export enum BotAuthenticationMode
{
    /**
     * Value for authentication option has not been determined, and requires calculation.
     */
    Unspecified = 'Unspecified',
    /**
     * No authentication is configured
     */
    None = 'None',
    /**
     * Authentication is provided by a trusted channel
     */
    Integrated = 'Integrated',
    /**
     * Authentication is provided by AAD, enabling AAD-specific authentication features
     */
    CustomAzureActiveDirectory = 'CustomAzureActiveDirectory',
    /**
     * Authentication is provided by a custom OAuth provider
     */
    GenericOAuth2 = 'GenericOAuth2',
}

/**
 * Helper functions around the `BotAuthenticationMode` enum.
 */
export const BotAuthenticationModeHelpers = 
{
    /**
     * Gets the lookup key for the title of a `BotAuthenticationMode` value
     */
    getTitleKey: (botAuthenticationMode: BotAuthenticationMode): string => {
        switch (botAuthenticationMode) {
            case BotAuthenticationMode.Unspecified:
                return '$$enum_BotAuthenticationMode_Unspecified_title$$';
            case BotAuthenticationMode.None:
                return '$$enum_BotAuthenticationMode_None_title$$';
            case BotAuthenticationMode.Integrated:
                return '$$enum_BotAuthenticationMode_Integrated_title$$';
            case BotAuthenticationMode.CustomAzureActiveDirectory:
                return '$$enum_BotAuthenticationMode_CustomAzureActiveDirectory_title$$';
            case BotAuthenticationMode.GenericOAuth2:
                return '$$enum_BotAuthenticationMode_GenericOAuth2_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `BotAuthenticationMode` value
     */
    getDescriptionKey: (botAuthenticationMode: BotAuthenticationMode): string => {
        switch (botAuthenticationMode) {
            case BotAuthenticationMode.Unspecified:
                return '$$enum_BotAuthenticationMode_Unspecified_description$$';
            case BotAuthenticationMode.None:
                return '$$enum_BotAuthenticationMode_None_description$$';
            case BotAuthenticationMode.Integrated:
                return '$$enum_BotAuthenticationMode_Integrated_description$$';
            case BotAuthenticationMode.CustomAzureActiveDirectory:
                return '$$enum_BotAuthenticationMode_CustomAzureActiveDirectory_description$$';
            case BotAuthenticationMode.GenericOAuth2:
                return '$$enum_BotAuthenticationMode_GenericOAuth2_description$$';
        }
    }
}

export enum BotAuthenticationTrigger
{
    /**
     * Prompts the user for authentication when a login node is reached
     */
    AsNeeded = 'AsNeeded',
    /**
     * Prompts the user for authentication at conversation start, and will force user to login if their access token expires.
     */
    Always = 'Always',
}

/**
 * Helper functions around the `BotAuthenticationTrigger` enum.
 */
export const BotAuthenticationTriggerHelpers = 
{
    /**
     * Gets the lookup key for the title of a `BotAuthenticationTrigger` value
     */
    getTitleKey: (botAuthenticationTrigger: BotAuthenticationTrigger): string => {
        switch (botAuthenticationTrigger) {
            case BotAuthenticationTrigger.AsNeeded:
                return '$$enum_BotAuthenticationTrigger_AsNeeded_title$$';
            case BotAuthenticationTrigger.Always:
                return '$$enum_BotAuthenticationTrigger_Always_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `BotAuthenticationTrigger` value
     */
    getDescriptionKey: (botAuthenticationTrigger: BotAuthenticationTrigger): string => {
        switch (botAuthenticationTrigger) {
            case BotAuthenticationTrigger.AsNeeded:
                return '$$enum_BotAuthenticationTrigger_AsNeeded_description$$';
            case BotAuthenticationTrigger.Always:
                return '$$enum_BotAuthenticationTrigger_Always_description$$';
        }
    }
}

export enum BotComponentReusePolicy
{
    /**
     * Not Reusable. By default, a chatbot subcomponent is not reusable and Reuse Policy is None
     */
    None = 'None',
    /**
     * Is required by one or more Public chatbot subcomponent, but is not directly invokable or visible.
     */
    Private = 'Private',
    /**
     * Visible shared / reusable chatbot subcomponent for use in all bots in the environment.
     */
    Public = 'Public',
}

/**
 * Helper functions around the `BotComponentReusePolicy` enum.
 */
export const BotComponentReusePolicyHelpers = 
{
    /**
     * Gets the lookup key for the title of a `BotComponentReusePolicy` value
     */
    getTitleKey: (botComponentReusePolicy: BotComponentReusePolicy): string => {
        switch (botComponentReusePolicy) {
            case BotComponentReusePolicy.None:
                return '$$enum_BotComponentReusePolicy_None_title$$';
            case BotComponentReusePolicy.Private:
                return '$$enum_BotComponentReusePolicy_Private_title$$';
            case BotComponentReusePolicy.Public:
                return '$$enum_BotComponentReusePolicy_Public_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `BotComponentReusePolicy` value
     */
    getDescriptionKey: (botComponentReusePolicy: BotComponentReusePolicy): string => {
        switch (botComponentReusePolicy) {
            case BotComponentReusePolicy.None:
                return '$$enum_BotComponentReusePolicy_None_description$$';
            case BotComponentReusePolicy.Private:
                return '$$enum_BotComponentReusePolicy_Private_description$$';
            case BotComponentReusePolicy.Public:
                return '$$enum_BotComponentReusePolicy_Public_description$$';
        }
    }
}

export enum Language
{
    Arabic = 1025,
    Chinese_Simplified = 2052,
    Chinese_Traditional = 1028,
    Czech = 1029,
    Danish = 1030,
    Dutch = 1043,
    English = 1033,
    Finnish = 1035,
    French = 1036,
    German = 1031,
    Greek = 1032,
    Hindi = 1081,
    Indonesian = 1057,
    Italian = 1040,
    Japanese = 1041,
    Korean = 1042,
    Norwegian = 1044,
    Polish = 1045,
    Portuguese_Brazilian = 1046,
    Russian = 1049,
    Spanish = 1034,
    Thai = 1054,
    Swedish = 1053,
    Turkish = 1055,
}

/**
 * Helper functions around the `Language` enum.
 */
export const LanguageHelpers = 
{
    /**
     * Gets the lookup key for the title of a `Language` value
     */
    getTitleKey: (language: Language): string => {
        switch (language) {
            case Language.Arabic:
                return '$$enum_Language_Arabic_title$$';
            case Language.Chinese_Simplified:
                return '$$enum_Language_Chinese_Simplified_title$$';
            case Language.Chinese_Traditional:
                return '$$enum_Language_Chinese_Traditional_title$$';
            case Language.Czech:
                return '$$enum_Language_Czech_title$$';
            case Language.Danish:
                return '$$enum_Language_Danish_title$$';
            case Language.Dutch:
                return '$$enum_Language_Dutch_title$$';
            case Language.English:
                return '$$enum_Language_English_title$$';
            case Language.Finnish:
                return '$$enum_Language_Finnish_title$$';
            case Language.French:
                return '$$enum_Language_French_title$$';
            case Language.German:
                return '$$enum_Language_German_title$$';
            case Language.Greek:
                return '$$enum_Language_Greek_title$$';
            case Language.Hindi:
                return '$$enum_Language_Hindi_title$$';
            case Language.Indonesian:
                return '$$enum_Language_Indonesian_title$$';
            case Language.Italian:
                return '$$enum_Language_Italian_title$$';
            case Language.Japanese:
                return '$$enum_Language_Japanese_title$$';
            case Language.Korean:
                return '$$enum_Language_Korean_title$$';
            case Language.Norwegian:
                return '$$enum_Language_Norwegian_title$$';
            case Language.Polish:
                return '$$enum_Language_Polish_title$$';
            case Language.Portuguese_Brazilian:
                return '$$enum_Language_Portuguese_Brazilian_title$$';
            case Language.Russian:
                return '$$enum_Language_Russian_title$$';
            case Language.Spanish:
                return '$$enum_Language_Spanish_title$$';
            case Language.Thai:
                return '$$enum_Language_Thai_title$$';
            case Language.Swedish:
                return '$$enum_Language_Swedish_title$$';
            case Language.Turkish:
                return '$$enum_Language_Turkish_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `Language` value
     */
    getDescriptionKey: (language: Language): string => {
        switch (language) {
            case Language.Arabic:
                return '$$enum_Language_Arabic_description$$';
            case Language.Chinese_Simplified:
                return '$$enum_Language_Chinese_Simplified_description$$';
            case Language.Chinese_Traditional:
                return '$$enum_Language_Chinese_Traditional_description$$';
            case Language.Czech:
                return '$$enum_Language_Czech_description$$';
            case Language.Danish:
                return '$$enum_Language_Danish_description$$';
            case Language.Dutch:
                return '$$enum_Language_Dutch_description$$';
            case Language.English:
                return '$$enum_Language_English_description$$';
            case Language.Finnish:
                return '$$enum_Language_Finnish_description$$';
            case Language.French:
                return '$$enum_Language_French_description$$';
            case Language.German:
                return '$$enum_Language_German_description$$';
            case Language.Greek:
                return '$$enum_Language_Greek_description$$';
            case Language.Hindi:
                return '$$enum_Language_Hindi_description$$';
            case Language.Indonesian:
                return '$$enum_Language_Indonesian_description$$';
            case Language.Italian:
                return '$$enum_Language_Italian_description$$';
            case Language.Japanese:
                return '$$enum_Language_Japanese_description$$';
            case Language.Korean:
                return '$$enum_Language_Korean_description$$';
            case Language.Norwegian:
                return '$$enum_Language_Norwegian_description$$';
            case Language.Polish:
                return '$$enum_Language_Polish_description$$';
            case Language.Portuguese_Brazilian:
                return '$$enum_Language_Portuguese_Brazilian_description$$';
            case Language.Russian:
                return '$$enum_Language_Russian_description$$';
            case Language.Spanish:
                return '$$enum_Language_Spanish_description$$';
            case Language.Thai:
                return '$$enum_Language_Thai_description$$';
            case Language.Swedish:
                return '$$enum_Language_Swedish_description$$';
            case Language.Turkish:
                return '$$enum_Language_Turkish_description$$';
        }
    }
}

export enum AttachmentOutputFormat
{
    /**
     * Pass inputs in a List.
     */
    All = 'All',
    /**
     * Pass input as a single element.
     */
    First = 'First',
}

/**
 * Helper functions around the `AttachmentOutputFormat` enum.
 */
export const AttachmentOutputFormatHelpers = 
{
    /**
     * Gets the lookup key for the title of a `AttachmentOutputFormat` value
     */
    getTitleKey: (attachmentOutputFormat: AttachmentOutputFormat): string => {
        switch (attachmentOutputFormat) {
            case AttachmentOutputFormat.All:
                return '$$enum_AttachmentOutputFormat_All_title$$';
            case AttachmentOutputFormat.First:
                return '$$enum_AttachmentOutputFormat_First_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `AttachmentOutputFormat` value
     */
    getDescriptionKey: (attachmentOutputFormat: AttachmentOutputFormat): string => {
        switch (attachmentOutputFormat) {
            case AttachmentOutputFormat.All:
                return '$$enum_AttachmentOutputFormat_All_description$$';
            case AttachmentOutputFormat.First:
                return '$$enum_AttachmentOutputFormat_First_description$$';
        }
    }
}

export enum ChoiceOutputFormat
{
    /**
     * Return the value of the choice
     */
    Value = 'Value',
    /**
     * Return the index of the choice
     */
    Index = 'Index',
}

/**
 * Helper functions around the `ChoiceOutputFormat` enum.
 */
export const ChoiceOutputFormatHelpers = 
{
    /**
     * Gets the lookup key for the title of a `ChoiceOutputFormat` value
     */
    getTitleKey: (choiceOutputFormat: ChoiceOutputFormat): string => {
        switch (choiceOutputFormat) {
            case ChoiceOutputFormat.Value:
                return '$$enum_ChoiceOutputFormat_Value_title$$';
            case ChoiceOutputFormat.Index:
                return '$$enum_ChoiceOutputFormat_Index_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `ChoiceOutputFormat` value
     */
    getDescriptionKey: (choiceOutputFormat: ChoiceOutputFormat): string => {
        switch (choiceOutputFormat) {
            case ChoiceOutputFormat.Value:
                return '$$enum_ChoiceOutputFormat_Value_description$$';
            case ChoiceOutputFormat.Index:
                return '$$enum_ChoiceOutputFormat_Index_description$$';
        }
    }
}

export enum ActivityImportance
{
    Low = 'Low',
    Normal = 'Normal',
    High = 'High',
}

/**
 * Helper functions around the `ActivityImportance` enum.
 */
export const ActivityImportanceHelpers = 
{
    /**
     * Gets the lookup key for the title of a `ActivityImportance` value
     */
    getTitleKey: (activityImportance: ActivityImportance): string => {
        switch (activityImportance) {
            case ActivityImportance.Low:
                return '$$enum_ActivityImportance_Low_title$$';
            case ActivityImportance.Normal:
                return '$$enum_ActivityImportance_Normal_title$$';
            case ActivityImportance.High:
                return '$$enum_ActivityImportance_High_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `ActivityImportance` value
     */
    getDescriptionKey: (activityImportance: ActivityImportance): string => {
        switch (activityImportance) {
            case ActivityImportance.Low:
                return '$$enum_ActivityImportance_Low_description$$';
            case ActivityImportance.Normal:
                return '$$enum_ActivityImportance_Normal_description$$';
            case ActivityImportance.High:
                return '$$enum_ActivityImportance_High_description$$';
        }
    }
}

export enum AttachmentLayout
{
    List = 'List',
    Carousel = 'Carousel',
}

/**
 * Helper functions around the `AttachmentLayout` enum.
 */
export const AttachmentLayoutHelpers = 
{
    /**
     * Gets the lookup key for the title of a `AttachmentLayout` value
     */
    getTitleKey: (attachmentLayout: AttachmentLayout): string => {
        switch (attachmentLayout) {
            case AttachmentLayout.List:
                return '$$enum_AttachmentLayout_List_title$$';
            case AttachmentLayout.Carousel:
                return '$$enum_AttachmentLayout_Carousel_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `AttachmentLayout` value
     */
    getDescriptionKey: (attachmentLayout: AttachmentLayout): string => {
        switch (attachmentLayout) {
            case AttachmentLayout.List:
                return '$$enum_AttachmentLayout_List_description$$';
            case AttachmentLayout.Carousel:
                return '$$enum_AttachmentLayout_Carousel_description$$';
        }
    }
}

export enum InputHint
{
    AcceptingInput = 'AcceptingInput',
    IgnoringInput = 'IgnoringInput',
    ExpectingInput = 'ExpectingInput',
}

/**
 * Helper functions around the `InputHint` enum.
 */
export const InputHintHelpers = 
{
    /**
     * Gets the lookup key for the title of a `InputHint` value
     */
    getTitleKey: (inputHint: InputHint): string => {
        switch (inputHint) {
            case InputHint.AcceptingInput:
                return '$$enum_InputHint_AcceptingInput_title$$';
            case InputHint.IgnoringInput:
                return '$$enum_InputHint_IgnoringInput_title$$';
            case InputHint.ExpectingInput:
                return '$$enum_InputHint_ExpectingInput_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `InputHint` value
     */
    getDescriptionKey: (inputHint: InputHint): string => {
        switch (inputHint) {
            case InputHint.AcceptingInput:
                return '$$enum_InputHint_AcceptingInput_description$$';
            case InputHint.IgnoringInput:
                return '$$enum_InputHint_IgnoringInput_description$$';
            case InputHint.ExpectingInput:
                return '$$enum_InputHint_ExpectingInput_description$$';
        }
    }
}

export enum PrebuiltEntityName
{
    String = 'String',
    Boolean = 'Boolean',
    Money = 'Money',
    Age = 'Age',
    Number = 'Number',
    DateTime = 'DateTime',
    Email = 'Email',
    PhoneNumber = 'PhoneNumber',
    URL = 'URL',
    Integer = 'Integer',
    PersonName = 'PersonName',
    Color = 'Color',
    Duration = 'Duration',
    Continent = 'Continent',
    CountryOrRegion = 'CountryOrRegion',
    State = 'State',
    City = 'City',
    StreetAddress = 'StreetAddress',
    ZipCode = 'ZipCode',
    Ordinal = 'Ordinal',
    Language = 'Language',
    Weight = 'Weight',
    Speed = 'Speed',
    Temperature = 'Temperature',
    Organization = 'Organization',
    Event = 'Event',
    PointOfInterest = 'PointOfInterest',
    Percentage = 'Percentage',
}

/**
 * Helper functions around the `PrebuiltEntityName` enum.
 */
export const PrebuiltEntityNameHelpers = 
{
    /**
     * Gets the lookup key for the title of a `PrebuiltEntityName` value
     */
    getTitleKey: (prebuiltEntityName: PrebuiltEntityName): string => {
        switch (prebuiltEntityName) {
            case PrebuiltEntityName.String:
                return '$$enum_PrebuiltEntityName_String_title$$';
            case PrebuiltEntityName.Boolean:
                return '$$enum_PrebuiltEntityName_Boolean_title$$';
            case PrebuiltEntityName.Money:
                return '$$enum_PrebuiltEntityName_Money_title$$';
            case PrebuiltEntityName.Age:
                return '$$enum_PrebuiltEntityName_Age_title$$';
            case PrebuiltEntityName.Number:
                return '$$enum_PrebuiltEntityName_Number_title$$';
            case PrebuiltEntityName.DateTime:
                return '$$enum_PrebuiltEntityName_DateTime_title$$';
            case PrebuiltEntityName.Email:
                return '$$enum_PrebuiltEntityName_Email_title$$';
            case PrebuiltEntityName.PhoneNumber:
                return '$$enum_PrebuiltEntityName_PhoneNumber_title$$';
            case PrebuiltEntityName.URL:
                return '$$enum_PrebuiltEntityName_URL_title$$';
            case PrebuiltEntityName.Integer:
                return '$$enum_PrebuiltEntityName_Integer_title$$';
            case PrebuiltEntityName.PersonName:
                return '$$enum_PrebuiltEntityName_PersonName_title$$';
            case PrebuiltEntityName.Color:
                return '$$enum_PrebuiltEntityName_Color_title$$';
            case PrebuiltEntityName.Duration:
                return '$$enum_PrebuiltEntityName_Duration_title$$';
            case PrebuiltEntityName.Continent:
                return '$$enum_PrebuiltEntityName_Continent_title$$';
            case PrebuiltEntityName.CountryOrRegion:
                return '$$enum_PrebuiltEntityName_CountryOrRegion_title$$';
            case PrebuiltEntityName.State:
                return '$$enum_PrebuiltEntityName_State_title$$';
            case PrebuiltEntityName.City:
                return '$$enum_PrebuiltEntityName_City_title$$';
            case PrebuiltEntityName.StreetAddress:
                return '$$enum_PrebuiltEntityName_StreetAddress_title$$';
            case PrebuiltEntityName.ZipCode:
                return '$$enum_PrebuiltEntityName_ZipCode_title$$';
            case PrebuiltEntityName.Ordinal:
                return '$$enum_PrebuiltEntityName_Ordinal_title$$';
            case PrebuiltEntityName.Language:
                return '$$enum_PrebuiltEntityName_Language_title$$';
            case PrebuiltEntityName.Weight:
                return '$$enum_PrebuiltEntityName_Weight_title$$';
            case PrebuiltEntityName.Speed:
                return '$$enum_PrebuiltEntityName_Speed_title$$';
            case PrebuiltEntityName.Temperature:
                return '$$enum_PrebuiltEntityName_Temperature_title$$';
            case PrebuiltEntityName.Organization:
                return '$$enum_PrebuiltEntityName_Organization_title$$';
            case PrebuiltEntityName.Event:
                return '$$enum_PrebuiltEntityName_Event_title$$';
            case PrebuiltEntityName.PointOfInterest:
                return '$$enum_PrebuiltEntityName_PointOfInterest_title$$';
            case PrebuiltEntityName.Percentage:
                return '$$enum_PrebuiltEntityName_Percentage_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `PrebuiltEntityName` value
     */
    getDescriptionKey: (prebuiltEntityName: PrebuiltEntityName): string => {
        switch (prebuiltEntityName) {
            case PrebuiltEntityName.String:
                return '$$enum_PrebuiltEntityName_String_description$$';
            case PrebuiltEntityName.Boolean:
                return '$$enum_PrebuiltEntityName_Boolean_description$$';
            case PrebuiltEntityName.Money:
                return '$$enum_PrebuiltEntityName_Money_description$$';
            case PrebuiltEntityName.Age:
                return '$$enum_PrebuiltEntityName_Age_description$$';
            case PrebuiltEntityName.Number:
                return '$$enum_PrebuiltEntityName_Number_description$$';
            case PrebuiltEntityName.DateTime:
                return '$$enum_PrebuiltEntityName_DateTime_description$$';
            case PrebuiltEntityName.Email:
                return '$$enum_PrebuiltEntityName_Email_description$$';
            case PrebuiltEntityName.PhoneNumber:
                return '$$enum_PrebuiltEntityName_PhoneNumber_description$$';
            case PrebuiltEntityName.URL:
                return '$$enum_PrebuiltEntityName_URL_description$$';
            case PrebuiltEntityName.Integer:
                return '$$enum_PrebuiltEntityName_Integer_description$$';
            case PrebuiltEntityName.PersonName:
                return '$$enum_PrebuiltEntityName_PersonName_description$$';
            case PrebuiltEntityName.Color:
                return '$$enum_PrebuiltEntityName_Color_description$$';
            case PrebuiltEntityName.Duration:
                return '$$enum_PrebuiltEntityName_Duration_description$$';
            case PrebuiltEntityName.Continent:
                return '$$enum_PrebuiltEntityName_Continent_description$$';
            case PrebuiltEntityName.CountryOrRegion:
                return '$$enum_PrebuiltEntityName_CountryOrRegion_description$$';
            case PrebuiltEntityName.State:
                return '$$enum_PrebuiltEntityName_State_description$$';
            case PrebuiltEntityName.City:
                return '$$enum_PrebuiltEntityName_City_description$$';
            case PrebuiltEntityName.StreetAddress:
                return '$$enum_PrebuiltEntityName_StreetAddress_description$$';
            case PrebuiltEntityName.ZipCode:
                return '$$enum_PrebuiltEntityName_ZipCode_description$$';
            case PrebuiltEntityName.Ordinal:
                return '$$enum_PrebuiltEntityName_Ordinal_description$$';
            case PrebuiltEntityName.Language:
                return '$$enum_PrebuiltEntityName_Language_description$$';
            case PrebuiltEntityName.Weight:
                return '$$enum_PrebuiltEntityName_Weight_description$$';
            case PrebuiltEntityName.Speed:
                return '$$enum_PrebuiltEntityName_Speed_description$$';
            case PrebuiltEntityName.Temperature:
                return '$$enum_PrebuiltEntityName_Temperature_description$$';
            case PrebuiltEntityName.Organization:
                return '$$enum_PrebuiltEntityName_Organization_description$$';
            case PrebuiltEntityName.Event:
                return '$$enum_PrebuiltEntityName_Event_description$$';
            case PrebuiltEntityName.PointOfInterest:
                return '$$enum_PrebuiltEntityName_PointOfInterest_description$$';
            case PrebuiltEntityName.Percentage:
                return '$$enum_PrebuiltEntityName_Percentage_description$$';
        }
    }
}

export enum ExpressionErrorCode
{
    UnexpectedCharacter = 'UnexpectedCharacter',
    IdentifierNotRecognized = 'IdentifierNotRecognized',
    IncompatibleTypes = 'IncompatibleTypes',
    UnknownError = 'UnknownError',
}

/**
 * Helper functions around the `ExpressionErrorCode` enum.
 */
export const ExpressionErrorCodeHelpers = 
{
    /**
     * Gets the lookup key for the title of a `ExpressionErrorCode` value
     */
    getTitleKey: (expressionErrorCode: ExpressionErrorCode): string => {
        switch (expressionErrorCode) {
            case ExpressionErrorCode.UnexpectedCharacter:
                return '$$enum_ExpressionErrorCode_UnexpectedCharacter_title$$';
            case ExpressionErrorCode.IdentifierNotRecognized:
                return '$$enum_ExpressionErrorCode_IdentifierNotRecognized_title$$';
            case ExpressionErrorCode.IncompatibleTypes:
                return '$$enum_ExpressionErrorCode_IncompatibleTypes_title$$';
            case ExpressionErrorCode.UnknownError:
                return '$$enum_ExpressionErrorCode_UnknownError_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `ExpressionErrorCode` value
     */
    getDescriptionKey: (expressionErrorCode: ExpressionErrorCode): string => {
        switch (expressionErrorCode) {
            case ExpressionErrorCode.UnexpectedCharacter:
                return '$$enum_ExpressionErrorCode_UnexpectedCharacter_description$$';
            case ExpressionErrorCode.IdentifierNotRecognized:
                return '$$enum_ExpressionErrorCode_IdentifierNotRecognized_description$$';
            case ExpressionErrorCode.IncompatibleTypes:
                return '$$enum_ExpressionErrorCode_IncompatibleTypes_description$$';
            case ExpressionErrorCode.UnknownError:
                return '$$enum_ExpressionErrorCode_UnknownError_description$$';
        }
    }
}

export enum ValidationErrorCode
{
    /**
     * Missing required property '{{0}}'
     */
    MissingRequiredProperty = 'MissingRequiredProperty',
    EmptyCollection = 'EmptyCollection',
    SynonymsNotUnique = 'SynonymsNotUnique',
    UnknownEnumValue = 'UnknownEnumValue',
    InvalidPropertyPath = 'InvalidPropertyPath',
}

/**
 * Helper functions around the `ValidationErrorCode` enum.
 */
export const ValidationErrorCodeHelpers = 
{
    /**
     * Gets the lookup key for the title of a `ValidationErrorCode` value
     */
    getTitleKey: (validationErrorCode: ValidationErrorCode): string => {
        switch (validationErrorCode) {
            case ValidationErrorCode.MissingRequiredProperty:
                return '$$enum_ValidationErrorCode_MissingRequiredProperty_title$$';
            case ValidationErrorCode.EmptyCollection:
                return '$$enum_ValidationErrorCode_EmptyCollection_title$$';
            case ValidationErrorCode.SynonymsNotUnique:
                return '$$enum_ValidationErrorCode_SynonymsNotUnique_title$$';
            case ValidationErrorCode.UnknownEnumValue:
                return '$$enum_ValidationErrorCode_UnknownEnumValue_title$$';
            case ValidationErrorCode.InvalidPropertyPath:
                return '$$enum_ValidationErrorCode_InvalidPropertyPath_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `ValidationErrorCode` value
     */
    getDescriptionKey: (validationErrorCode: ValidationErrorCode): string => {
        switch (validationErrorCode) {
            case ValidationErrorCode.MissingRequiredProperty:
                return '$$enum_ValidationErrorCode_MissingRequiredProperty_description$$';
            case ValidationErrorCode.EmptyCollection:
                return '$$enum_ValidationErrorCode_EmptyCollection_description$$';
            case ValidationErrorCode.SynonymsNotUnique:
                return '$$enum_ValidationErrorCode_SynonymsNotUnique_description$$';
            case ValidationErrorCode.UnknownEnumValue:
                return '$$enum_ValidationErrorCode_UnknownEnumValue_description$$';
            case ValidationErrorCode.InvalidPropertyPath:
                return '$$enum_ValidationErrorCode_InvalidPropertyPath_description$$';
        }
    }
}

export enum ReferenceType
{
    Skill = 'Skill',
    CloudFlow = 'CloudFlow',
    Dialog = 'Dialog',
    Trigger = 'Trigger',
    Action = 'Action',
    EnvironmentVariable = 'EnvironmentVariable',
}

/**
 * Helper functions around the `ReferenceType` enum.
 */
export const ReferenceTypeHelpers = 
{
    /**
     * Gets the lookup key for the title of a `ReferenceType` value
     */
    getTitleKey: (referenceType: ReferenceType): string => {
        switch (referenceType) {
            case ReferenceType.Skill:
                return '$$enum_ReferenceType_Skill_title$$';
            case ReferenceType.CloudFlow:
                return '$$enum_ReferenceType_CloudFlow_title$$';
            case ReferenceType.Dialog:
                return '$$enum_ReferenceType_Dialog_title$$';
            case ReferenceType.Trigger:
                return '$$enum_ReferenceType_Trigger_title$$';
            case ReferenceType.Action:
                return '$$enum_ReferenceType_Action_title$$';
            case ReferenceType.EnvironmentVariable:
                return '$$enum_ReferenceType_EnvironmentVariable_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `ReferenceType` value
     */
    getDescriptionKey: (referenceType: ReferenceType): string => {
        switch (referenceType) {
            case ReferenceType.Skill:
                return '$$enum_ReferenceType_Skill_description$$';
            case ReferenceType.CloudFlow:
                return '$$enum_ReferenceType_CloudFlow_description$$';
            case ReferenceType.Dialog:
                return '$$enum_ReferenceType_Dialog_description$$';
            case ReferenceType.Trigger:
                return '$$enum_ReferenceType_Trigger_description$$';
            case ReferenceType.Action:
                return '$$enum_ReferenceType_Action_description$$';
            case ReferenceType.EnvironmentVariable:
                return '$$enum_ReferenceType_EnvironmentVariable_description$$';
        }
    }
}

export enum InvalidReferenceErrorCode
{
    NotFound = 'NotFound',
    Disabled = 'Disabled',
    InvalidSelfReference = 'InvalidSelfReference',
}

/**
 * Helper functions around the `InvalidReferenceErrorCode` enum.
 */
export const InvalidReferenceErrorCodeHelpers = 
{
    /**
     * Gets the lookup key for the title of a `InvalidReferenceErrorCode` value
     */
    getTitleKey: (invalidReferenceErrorCode: InvalidReferenceErrorCode): string => {
        switch (invalidReferenceErrorCode) {
            case InvalidReferenceErrorCode.NotFound:
                return '$$enum_InvalidReferenceErrorCode_NotFound_title$$';
            case InvalidReferenceErrorCode.Disabled:
                return '$$enum_InvalidReferenceErrorCode_Disabled_title$$';
            case InvalidReferenceErrorCode.InvalidSelfReference:
                return '$$enum_InvalidReferenceErrorCode_InvalidSelfReference_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `InvalidReferenceErrorCode` value
     */
    getDescriptionKey: (invalidReferenceErrorCode: InvalidReferenceErrorCode): string => {
        switch (invalidReferenceErrorCode) {
            case InvalidReferenceErrorCode.NotFound:
                return '$$enum_InvalidReferenceErrorCode_NotFound_description$$';
            case InvalidReferenceErrorCode.Disabled:
                return '$$enum_InvalidReferenceErrorCode_Disabled_description$$';
            case InvalidReferenceErrorCode.InvalidSelfReference:
                return '$$enum_InvalidReferenceErrorCode_InvalidSelfReference_description$$';
        }
    }
}

export enum ActivityType
{
    ContactRelationUpdate = 'ContactRelationUpdate',
    ConversationUpdate = 'ConversationUpdate',
    EndOfConversation = 'EndOfConversation',
    Event = 'Event',
    Delay = 'Delay',
    DeleteUserData = 'DeleteUserData',
    Handoff = 'Handoff',
    InstallationUpdate = 'InstallationUpdate',
    Invoke = 'Invoke',
    Message = 'Message',
    MessageDelete = 'MessageDelete',
    MessageReaction = 'MessageReaction',
    MessageUpdate = 'MessageUpdate',
    Suggestion = 'Suggestion',
    Trace = 'Trace',
    Typing = 'Typing',
    Command = 'Command',
    CommandResult = 'CommandResult',
}

/**
 * Helper functions around the `ActivityType` enum.
 */
export const ActivityTypeHelpers = 
{
    /**
     * Gets the lookup key for the title of a `ActivityType` value
     */
    getTitleKey: (activityType: ActivityType): string => {
        switch (activityType) {
            case ActivityType.ContactRelationUpdate:
                return '$$enum_ActivityType_ContactRelationUpdate_title$$';
            case ActivityType.ConversationUpdate:
                return '$$enum_ActivityType_ConversationUpdate_title$$';
            case ActivityType.EndOfConversation:
                return '$$enum_ActivityType_EndOfConversation_title$$';
            case ActivityType.Event:
                return '$$enum_ActivityType_Event_title$$';
            case ActivityType.Delay:
                return '$$enum_ActivityType_Delay_title$$';
            case ActivityType.DeleteUserData:
                return '$$enum_ActivityType_DeleteUserData_title$$';
            case ActivityType.Handoff:
                return '$$enum_ActivityType_Handoff_title$$';
            case ActivityType.InstallationUpdate:
                return '$$enum_ActivityType_InstallationUpdate_title$$';
            case ActivityType.Invoke:
                return '$$enum_ActivityType_Invoke_title$$';
            case ActivityType.Message:
                return '$$enum_ActivityType_Message_title$$';
            case ActivityType.MessageDelete:
                return '$$enum_ActivityType_MessageDelete_title$$';
            case ActivityType.MessageReaction:
                return '$$enum_ActivityType_MessageReaction_title$$';
            case ActivityType.MessageUpdate:
                return '$$enum_ActivityType_MessageUpdate_title$$';
            case ActivityType.Suggestion:
                return '$$enum_ActivityType_Suggestion_title$$';
            case ActivityType.Trace:
                return '$$enum_ActivityType_Trace_title$$';
            case ActivityType.Typing:
                return '$$enum_ActivityType_Typing_title$$';
            case ActivityType.Command:
                return '$$enum_ActivityType_Command_title$$';
            case ActivityType.CommandResult:
                return '$$enum_ActivityType_CommandResult_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `ActivityType` value
     */
    getDescriptionKey: (activityType: ActivityType): string => {
        switch (activityType) {
            case ActivityType.ContactRelationUpdate:
                return '$$enum_ActivityType_ContactRelationUpdate_description$$';
            case ActivityType.ConversationUpdate:
                return '$$enum_ActivityType_ConversationUpdate_description$$';
            case ActivityType.EndOfConversation:
                return '$$enum_ActivityType_EndOfConversation_description$$';
            case ActivityType.Event:
                return '$$enum_ActivityType_Event_description$$';
            case ActivityType.Delay:
                return '$$enum_ActivityType_Delay_description$$';
            case ActivityType.DeleteUserData:
                return '$$enum_ActivityType_DeleteUserData_description$$';
            case ActivityType.Handoff:
                return '$$enum_ActivityType_Handoff_description$$';
            case ActivityType.InstallationUpdate:
                return '$$enum_ActivityType_InstallationUpdate_description$$';
            case ActivityType.Invoke:
                return '$$enum_ActivityType_Invoke_description$$';
            case ActivityType.Message:
                return '$$enum_ActivityType_Message_description$$';
            case ActivityType.MessageDelete:
                return '$$enum_ActivityType_MessageDelete_description$$';
            case ActivityType.MessageReaction:
                return '$$enum_ActivityType_MessageReaction_description$$';
            case ActivityType.MessageUpdate:
                return '$$enum_ActivityType_MessageUpdate_description$$';
            case ActivityType.Suggestion:
                return '$$enum_ActivityType_Suggestion_description$$';
            case ActivityType.Trace:
                return '$$enum_ActivityType_Trace_description$$';
            case ActivityType.Typing:
                return '$$enum_ActivityType_Typing_description$$';
            case ActivityType.Command:
                return '$$enum_ActivityType_Command_description$$';
            case ActivityType.CommandResult:
                return '$$enum_ActivityType_CommandResult_description$$';
        }
    }
}

export enum ChannelId
{
    Directline = 'Directline',
    Facebook = 'Facebook',
    MsTeams = 'MsTeams',
    Telephony = 'Telephony',
    Omnichannel = 'Omnichannel',
}

/**
 * Helper functions around the `ChannelId` enum.
 */
export const ChannelIdHelpers = 
{
    /**
     * Gets the lookup key for the title of a `ChannelId` value
     */
    getTitleKey: (channelId: ChannelId): string => {
        switch (channelId) {
            case ChannelId.Directline:
                return '$$enum_ChannelId_Directline_title$$';
            case ChannelId.Facebook:
                return '$$enum_ChannelId_Facebook_title$$';
            case ChannelId.MsTeams:
                return '$$enum_ChannelId_MsTeams_title$$';
            case ChannelId.Telephony:
                return '$$enum_ChannelId_Telephony_title$$';
            case ChannelId.Omnichannel:
                return '$$enum_ChannelId_Omnichannel_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `ChannelId` value
     */
    getDescriptionKey: (channelId: ChannelId): string => {
        switch (channelId) {
            case ChannelId.Directline:
                return '$$enum_ChannelId_Directline_description$$';
            case ChannelId.Facebook:
                return '$$enum_ChannelId_Facebook_description$$';
            case ChannelId.MsTeams:
                return '$$enum_ChannelId_MsTeams_description$$';
            case ChannelId.Telephony:
                return '$$enum_ChannelId_Telephony_description$$';
            case ChannelId.Omnichannel:
                return '$$enum_ChannelId_Omnichannel_description$$';
        }
    }
}

export enum BooleanConditionOperator
{
    /**
     * Returns true if a case insensitive substring is found
     */
    Equal = 'Equal',
    NotEqual = 'NotEqual',
    Greater = 'Greater',
    GreaterEqual = 'GreaterEqual',
    Less = 'Less',
    LessEqual = 'LessEqual',
    /**
     * Returns true if a case insensitive substring is found
     */
    In = 'In',
    /**
     * Returns true if a case sensitive substring is found
     */
    ExactIn = 'ExactIn',
    /**
     * Returns true if the variable has a blank value or is an empty string
     */
    IsBlank = 'IsBlank',
    /**
     * Returns true if the variable does not have a blank value or or is an empty string
     */
    IsNotBlank = 'IsNotBlank',
    /**
     * Returns true if a table contains no Records
     */
    IsEmpty = 'IsEmpty',
    /**
     * Returns true if a table contains at least one Record
     */
    IsNotEmpty = 'IsNotEmpty',
}

/**
 * Helper functions around the `BooleanConditionOperator` enum.
 */
export const BooleanConditionOperatorHelpers = 
{
    /**
     * Gets the lookup key for the title of a `BooleanConditionOperator` value
     */
    getTitleKey: (booleanConditionOperator: BooleanConditionOperator): string => {
        switch (booleanConditionOperator) {
            case BooleanConditionOperator.Equal:
                return '$$enum_BooleanConditionOperator_Equal_title$$';
            case BooleanConditionOperator.NotEqual:
                return '$$enum_BooleanConditionOperator_NotEqual_title$$';
            case BooleanConditionOperator.Greater:
                return '$$enum_BooleanConditionOperator_Greater_title$$';
            case BooleanConditionOperator.GreaterEqual:
                return '$$enum_BooleanConditionOperator_GreaterEqual_title$$';
            case BooleanConditionOperator.Less:
                return '$$enum_BooleanConditionOperator_Less_title$$';
            case BooleanConditionOperator.LessEqual:
                return '$$enum_BooleanConditionOperator_LessEqual_title$$';
            case BooleanConditionOperator.In:
                return '$$enum_BooleanConditionOperator_In_title$$';
            case BooleanConditionOperator.ExactIn:
                return '$$enum_BooleanConditionOperator_ExactIn_title$$';
            case BooleanConditionOperator.IsBlank:
                return '$$enum_BooleanConditionOperator_IsBlank_title$$';
            case BooleanConditionOperator.IsNotBlank:
                return '$$enum_BooleanConditionOperator_IsNotBlank_title$$';
            case BooleanConditionOperator.IsEmpty:
                return '$$enum_BooleanConditionOperator_IsEmpty_title$$';
            case BooleanConditionOperator.IsNotEmpty:
                return '$$enum_BooleanConditionOperator_IsNotEmpty_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `BooleanConditionOperator` value
     */
    getDescriptionKey: (booleanConditionOperator: BooleanConditionOperator): string => {
        switch (booleanConditionOperator) {
            case BooleanConditionOperator.Equal:
                return '$$enum_BooleanConditionOperator_Equal_description$$';
            case BooleanConditionOperator.NotEqual:
                return '$$enum_BooleanConditionOperator_NotEqual_description$$';
            case BooleanConditionOperator.Greater:
                return '$$enum_BooleanConditionOperator_Greater_description$$';
            case BooleanConditionOperator.GreaterEqual:
                return '$$enum_BooleanConditionOperator_GreaterEqual_description$$';
            case BooleanConditionOperator.Less:
                return '$$enum_BooleanConditionOperator_Less_description$$';
            case BooleanConditionOperator.LessEqual:
                return '$$enum_BooleanConditionOperator_LessEqual_description$$';
            case BooleanConditionOperator.In:
                return '$$enum_BooleanConditionOperator_In_description$$';
            case BooleanConditionOperator.ExactIn:
                return '$$enum_BooleanConditionOperator_ExactIn_description$$';
            case BooleanConditionOperator.IsBlank:
                return '$$enum_BooleanConditionOperator_IsBlank_description$$';
            case BooleanConditionOperator.IsNotBlank:
                return '$$enum_BooleanConditionOperator_IsNotBlank_description$$';
            case BooleanConditionOperator.IsEmpty:
                return '$$enum_BooleanConditionOperator_IsEmpty_description$$';
            case BooleanConditionOperator.IsNotEmpty:
                return '$$enum_BooleanConditionOperator_IsNotEmpty_description$$';
        }
    }
}

export enum WasmBrowserTelemetryLogLevel
{
    Critical = 'Critical',
    Error = 'Error',
    Warning = 'Warning',
    Information = 'Information',
    Trace = 'Trace',
    Debug = 'Debug',
}

/**
 * Helper functions around the `WasmBrowserTelemetryLogLevel` enum.
 */
export const WasmBrowserTelemetryLogLevelHelpers = 
{
    /**
     * Gets the lookup key for the title of a `WasmBrowserTelemetryLogLevel` value
     */
    getTitleKey: (wasmBrowserTelemetryLogLevel: WasmBrowserTelemetryLogLevel): string => {
        switch (wasmBrowserTelemetryLogLevel) {
            case WasmBrowserTelemetryLogLevel.Critical:
                return '$$enum_WasmBrowserTelemetryLogLevel_Critical_title$$';
            case WasmBrowserTelemetryLogLevel.Error:
                return '$$enum_WasmBrowserTelemetryLogLevel_Error_title$$';
            case WasmBrowserTelemetryLogLevel.Warning:
                return '$$enum_WasmBrowserTelemetryLogLevel_Warning_title$$';
            case WasmBrowserTelemetryLogLevel.Information:
                return '$$enum_WasmBrowserTelemetryLogLevel_Information_title$$';
            case WasmBrowserTelemetryLogLevel.Trace:
                return '$$enum_WasmBrowserTelemetryLogLevel_Trace_title$$';
            case WasmBrowserTelemetryLogLevel.Debug:
                return '$$enum_WasmBrowserTelemetryLogLevel_Debug_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `WasmBrowserTelemetryLogLevel` value
     */
    getDescriptionKey: (wasmBrowserTelemetryLogLevel: WasmBrowserTelemetryLogLevel): string => {
        switch (wasmBrowserTelemetryLogLevel) {
            case WasmBrowserTelemetryLogLevel.Critical:
                return '$$enum_WasmBrowserTelemetryLogLevel_Critical_description$$';
            case WasmBrowserTelemetryLogLevel.Error:
                return '$$enum_WasmBrowserTelemetryLogLevel_Error_description$$';
            case WasmBrowserTelemetryLogLevel.Warning:
                return '$$enum_WasmBrowserTelemetryLogLevel_Warning_description$$';
            case WasmBrowserTelemetryLogLevel.Information:
                return '$$enum_WasmBrowserTelemetryLogLevel_Information_description$$';
            case WasmBrowserTelemetryLogLevel.Trace:
                return '$$enum_WasmBrowserTelemetryLogLevel_Trace_description$$';
            case WasmBrowserTelemetryLogLevel.Debug:
                return '$$enum_WasmBrowserTelemetryLogLevel_Debug_description$$';
        }
    }
}

/**
 * Represents a type of system option set
 */
export enum SystemOptionSetName
{
    /**
     * Controls the way that choices for a `ChoicePrompt` or yes/no options for a `ConfirmPrompt` are presented to a user.
     */
    ListStyle = 'ListStyle',
    VariablesToClear = 'VariablesToClear',
    HttpResponseType = 'HttpResponseType',
    HttpMethod = 'HttpMethod',
    HandoffVariablesList = 'HandoffVariablesList',
    Locale = 'Locale',
    AttachmentOutputFormat = 'AttachmentOutputFormat',
    ChoiceOutputFormat = 'ChoiceOutputFormat',
    ActivityType = 'ActivityType',
    ChannelId = 'ChannelId',
}

/**
 * Helper functions around the `SystemOptionSetName` enum.
 */
export const SystemOptionSetNameHelpers = 
{
    /**
     * Gets the lookup key for the title of a `SystemOptionSetName` value
     */
    getTitleKey: (systemOptionSetName: SystemOptionSetName): string => {
        switch (systemOptionSetName) {
            case SystemOptionSetName.ListStyle:
                return '$$enum_SystemOptionSetName_ListStyle_title$$';
            case SystemOptionSetName.VariablesToClear:
                return '$$enum_SystemOptionSetName_VariablesToClear_title$$';
            case SystemOptionSetName.HttpResponseType:
                return '$$enum_SystemOptionSetName_HttpResponseType_title$$';
            case SystemOptionSetName.HttpMethod:
                return '$$enum_SystemOptionSetName_HttpMethod_title$$';
            case SystemOptionSetName.HandoffVariablesList:
                return '$$enum_SystemOptionSetName_HandoffVariablesList_title$$';
            case SystemOptionSetName.Locale:
                return '$$enum_SystemOptionSetName_Locale_title$$';
            case SystemOptionSetName.AttachmentOutputFormat:
                return '$$enum_SystemOptionSetName_AttachmentOutputFormat_title$$';
            case SystemOptionSetName.ChoiceOutputFormat:
                return '$$enum_SystemOptionSetName_ChoiceOutputFormat_title$$';
            case SystemOptionSetName.ActivityType:
                return '$$enum_SystemOptionSetName_ActivityType_title$$';
            case SystemOptionSetName.ChannelId:
                return '$$enum_SystemOptionSetName_ChannelId_title$$';
        }
    },

    /**
     * Gets the lookup key for the description of a `SystemOptionSetName` value
     */
    getDescriptionKey: (systemOptionSetName: SystemOptionSetName): string => {
        switch (systemOptionSetName) {
            case SystemOptionSetName.ListStyle:
                return '$$enum_SystemOptionSetName_ListStyle_description$$';
            case SystemOptionSetName.VariablesToClear:
                return '$$enum_SystemOptionSetName_VariablesToClear_description$$';
            case SystemOptionSetName.HttpResponseType:
                return '$$enum_SystemOptionSetName_HttpResponseType_description$$';
            case SystemOptionSetName.HttpMethod:
                return '$$enum_SystemOptionSetName_HttpMethod_description$$';
            case SystemOptionSetName.HandoffVariablesList:
                return '$$enum_SystemOptionSetName_HandoffVariablesList_description$$';
            case SystemOptionSetName.Locale:
                return '$$enum_SystemOptionSetName_Locale_description$$';
            case SystemOptionSetName.AttachmentOutputFormat:
                return '$$enum_SystemOptionSetName_AttachmentOutputFormat_description$$';
            case SystemOptionSetName.ChoiceOutputFormat:
                return '$$enum_SystemOptionSetName_ChoiceOutputFormat_description$$';
            case SystemOptionSetName.ActivityType:
                return '$$enum_SystemOptionSetName_ActivityType_description$$';
            case SystemOptionSetName.ChannelId:
                return '$$enum_SystemOptionSetName_ChannelId_description$$';
        }
    }
}
